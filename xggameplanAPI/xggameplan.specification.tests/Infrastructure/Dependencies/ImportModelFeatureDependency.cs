using BoDi;
using ImagineCommunications.GamePlan.Domain.AnalysisGroups.Objects;
using ImagineCommunications.GamePlan.Domain.AutoBookApi.DefaultParameters;
using ImagineCommunications.GamePlan.Domain.AutoBookApi.InstanceConfiguration.Objects;
using ImagineCommunications.GamePlan.Domain.AutoBookApi.Settings;
using ImagineCommunications.GamePlan.Domain.AutoBookApi.Storage.Objects;
using ImagineCommunications.GamePlan.Domain.Autopilot.FlexibilityLevels;
using ImagineCommunications.GamePlan.Domain.Autopilot.Rules;
using ImagineCommunications.GamePlan.Domain.Autopilot.Settings;
using ImagineCommunications.GamePlan.Domain.AWSInstanceConfigurations;
using ImagineCommunications.GamePlan.Domain.Breaks.Objects;
using ImagineCommunications.GamePlan.Domain.BusinessRules.Clashes.Objects;
using ImagineCommunications.GamePlan.Domain.BusinessRules.ClashExceptions.Objects;
using ImagineCommunications.GamePlan.Domain.BusinessRules.Restrictions.Objects;
using ImagineCommunications.GamePlan.Domain.BusinessRules.Rules;
using ImagineCommunications.GamePlan.Domain.BusinessRules.RuleTypes;
using ImagineCommunications.GamePlan.Domain.BusinessTypes.Objects;
using ImagineCommunications.GamePlan.Domain.Campaigns.Objects;
using ImagineCommunications.GamePlan.Domain.DayParts.Objects;
using ImagineCommunications.GamePlan.Domain.EfficiencySettings;
using ImagineCommunications.GamePlan.Domain.IndexTypes;
using ImagineCommunications.GamePlan.Domain.KPIComparisonConfigs;
using ImagineCommunications.GamePlan.Domain.Maintenance.DatabaseDetail;
using ImagineCommunications.GamePlan.Domain.Maintenance.TaskInstances;
using ImagineCommunications.GamePlan.Domain.Maintenance.UpdateDetail;
using ImagineCommunications.GamePlan.Domain.Optimizer.ISRGlobalSettings.Objects;
using ImagineCommunications.GamePlan.Domain.Optimizer.ISRSettings.Objects;
using ImagineCommunications.GamePlan.Domain.Optimizer.RSGlobalSettings.Objects;
using ImagineCommunications.GamePlan.Domain.Optimizer.RSSettings.Objects;
using ImagineCommunications.GamePlan.Domain.OutputFiles.Objects;
using ImagineCommunications.GamePlan.Domain.Passes.Objects;
using ImagineCommunications.GamePlan.Domain.PositionInBreaks.BookingPositionGroups.Objects;
using ImagineCommunications.GamePlan.Domain.PositionInBreaks.BookingPositions;
using ImagineCommunications.GamePlan.Domain.ProgrammeCategory;
using ImagineCommunications.GamePlan.Domain.ProgrammeDictionaries;
using ImagineCommunications.GamePlan.Domain.RatingSchedules;
using ImagineCommunications.GamePlan.Domain.Recommendations.Objects;
using ImagineCommunications.GamePlan.Domain.Runs.Objects;
using ImagineCommunications.GamePlan.Domain.RunTypes.Objects;
using ImagineCommunications.GamePlan.Domain.ScenarioCampaignFailures.Objects;
using ImagineCommunications.GamePlan.Domain.ScenarioCampaignResults.Objects;
using ImagineCommunications.GamePlan.Domain.ScenarioFailures.Objects;
using ImagineCommunications.GamePlan.Domain.ScenarioResults.Objects;
using ImagineCommunications.GamePlan.Domain.Scenarios.Objects;
using ImagineCommunications.GamePlan.Domain.Shared.Channels;
using ImagineCommunications.GamePlan.Domain.Shared.ClearanceCodes;
using ImagineCommunications.GamePlan.Domain.Shared.Demographics;
using ImagineCommunications.GamePlan.Domain.Shared.FunctionalAreas.Objects;
using ImagineCommunications.GamePlan.Domain.Shared.Languages;
using ImagineCommunications.GamePlan.Domain.Shared.Metadatas;
using ImagineCommunications.GamePlan.Domain.Shared.Products.Objects;
using ImagineCommunications.GamePlan.Domain.Shared.ProgrammeClassifications;
using ImagineCommunications.GamePlan.Domain.Shared.Programmes.Objects;
using ImagineCommunications.GamePlan.Domain.Shared.SalesAreas;
using ImagineCommunications.GamePlan.Domain.Shared.Schedules;
using ImagineCommunications.GamePlan.Domain.Shared.System.Products;
using ImagineCommunications.GamePlan.Domain.Shared.System.Tenants;
using ImagineCommunications.GamePlan.Domain.Shared.Universes;
using ImagineCommunications.GamePlan.Domain.SmoothConfigurations.Objects;
using ImagineCommunications.GamePlan.Domain.SmoothFailureMessages;
using ImagineCommunications.GamePlan.Domain.SmoothFailures;
using ImagineCommunications.GamePlan.Domain.SpotBookingRules;
using ImagineCommunications.GamePlan.Domain.SpotPlacements;
using ImagineCommunications.GamePlan.Domain.Spots;
using ImagineCommunications.GamePlan.Domain.TotalRatings;
using Raven.Database.Server.Security.OAuth;
using xggameplan.AuditEvents;
using xggameplan.specification.tests.Interfaces;

namespace xggameplan.specification.tests.Infrastructure.Dependencies
{
    public class ImportModelFeatureDependency : IFeatureDependency
    {
        public void Register(IObjectContainer objectContainer)
        {
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AccessToken>(), "AccessTokens");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AnalysisGroup>(), "AnalysisGroups");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AutoBookDefaultParameters>(), "AutoBookDefaultParameters");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AutoBookInstanceConfiguration>(), "AutoBookInstanceConfigurations");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AutoBook>(), "AutoBooks");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AutoBookSettings>(), "AutoBookSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AutopilotRule>(), "AutopilotRules");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AutopilotSettings>(), "AutopilotSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<AWSInstanceConfiguration>(), "AWSInstanceConfigurations");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<BookingPosition>(), "BookingPositions");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<BookingPositionGroup>(), "BookingPositionGroups");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Break>(), "Breaks");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<BusinessType>(), "BusinessTypes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Campaign>(), "Campaigns");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<CampaignSettings>(), "CampaignSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Channel>(), "Channels");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ClashException>(), "ClashExceptions");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Clash>(), "Clashes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ClearanceCode>(), "ClearanceCodes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<DatabaseDetails>(), "DatabaseDetails");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Demographic>(), "Demographics");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<EfficiencySettings>(), "EfficiencySettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<EmailAuditEventSettings>(), "EmailAuditEventSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Failures>(), "Failures");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<FlexibilityLevel>(), "FlexibilityLevels");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<FunctionalArea>(), "FunctionalAreas");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<IndexType>(), "IndexTypes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ISRSettings>(), "ISRSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ISRGlobalSettings>(), "ISRGlobalSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<KPIComparisonConfig>(), "KPIComparisonConfigs");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Language>(), "Languages");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Metadata>(), "Metadata");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<MSTeamsAuditEventSettings>(), "MSTeamsAuditEventSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<OutputFile>(), "OutputFiles");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Pass>(), "Passes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Product>(), "Products");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ProductSettings>(), "ProductSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ProgrammeClassification>(), "ProgrammeClassifications");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ProgrammeDictionary>(), "ProgrammeDictionaries");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Programme>(), "Programmes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ProgrammeCategoryHierarchy>(), "ProgrammeCategories");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<RatingsPredictionSchedule>(), "RatingsPredictionSchedules");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Recommendation>(), "Recommendations");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Restriction>(), "Restrictions");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<RSSettings>(), "RSSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<RuleType>(), "RuleTypes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Rule>(), "Rules");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<RSGlobalSettings>(), "RSGlobalSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Run>(), "Runs");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<SalesArea>(), "SalesAreas");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Scenario>(), "Scenarios");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ScenarioResult>(), "ScenarioResults");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Schedule>(), "Schedules");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<SmoothConfiguration>(), "SmoothConfigurations");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<SmoothFailureMessage>(), "SmoothFailureMessages");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<SmoothFailure>(), "SmoothFailures");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<SpotPlacement>(), "SpotPlacements");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Spot>(), "Spots");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<StandardDayPart>(), "StandardDayParts");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<StandardDayPartGroup>(), "StandardDayPartGroups");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<TaskInstance>(), "TaskInstances");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<TenantSettings>(), "TenantSettings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<TotalRating>(), "TotalRatings");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<Universe>(), "Universes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<UpdateDetails>(), "UpdateDetails");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ScenarioCampaignResult>(), "ScenarioCampaignResults");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ScenarioCampaignFailure>(), "ScenarioCampaignFailures");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<ProgrammeEpisode>(), "ProgrammeEpisodes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<RunType>(), "RunTypes");
            objectContainer.RegisterFactoryAs<IImportedModel>(oc => new ImportedModel<SpotBookingRule>(), "SpotBookingRules");
        }
    }
}
