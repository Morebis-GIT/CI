using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;
using System.Web.Http.Description;
using AutoMapper;
using ImagineCommunications.GamePlan.Domain.Shared.Demographics;
using xggameplan.Errors;
using xggameplan.Filters;
using xggameplan.Model;
using xggameplan.Services;

namespace xggameplan.Controllers
{
    /// <summary>
    /// Demographics API
    /// </summary>
    [RoutePrefix("Demographics")]
    public class DemographicController : ApiController
    {
        private const int AutoGeneratedId = 0;

        private readonly IDemographicRepository _demographicRepository;
        private readonly IDataChangeValidator _dataChangeValidator;
        private readonly IMapper _mapper;

        /// <summary>
        /// Demographic controller constructor
        /// </summary>
        /// <param name="demographicRepository"></param>
        /// <param name="dataChangeValidator"></param>
        /// <param name="mapper"></param>
        public DemographicController(
            IDemographicRepository demographicRepository,
            IDataChangeValidator dataChangeValidator,
            IMapper mapper)
        {
            _demographicRepository = demographicRepository;
            _dataChangeValidator = dataChangeValidator;
            _mapper = mapper;
        }

        /// <summary>
        /// Get all Gameplan Demographics
        /// </summary>
        /// <returns></returns>
        [Route("Gameplan")]
        [AuthorizeRequest("Demographics")]
        public List<DemographicModel> GetAllGameplan()
        {
            var d = _demographicRepository.GetAll();
            return _mapper.Map<List<DemographicModel>>(d.Where(i => i.Gameplan).OrderBy(i => i.DisplayOrder));
        }

        /// <summary>
        /// Get all Demographics
        /// </summary>
        /// <returns></returns>
        [Route("")]
        [AuthorizeRequest("Demographics")]
        public List<DemographicModel> Get()
        {
            var d = _demographicRepository.GetAll().OrderBy(i => i.DisplayOrder);
            return _mapper.Map<List<DemographicModel>>(d);
        }

        /// <summary>
        /// Get Demographic by Id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [Route("{id}")]
        [AuthorizeRequest("Demographics")]
        [ResponseType(typeof(DemographicModel))]
        public IHttpActionResult GetById([FromUri] int id)
        {
            if (!ModelState.IsValid)
            {
                return this.Error().InvalidParameters();
            }
            var d = _demographicRepository.GetById(id);
            if (d == null)
            {
                return NotFound();
            }
            return Ok(_mapper.Map<DemographicModel>(d));
        }

        /// <summary>
        /// Get Demographic by ExternalRef
        /// </summary>
        /// <param name="externalRef"></param>
        /// <returns></returns>
        [Route("externalref/{externalRef}")]
        [AuthorizeRequest("Demographics")]
        [ResponseType(typeof(DemographicModel))]
        public IHttpActionResult GetByExternalRef([FromUri] string externalRef)
        {
            if (!ModelState.IsValid || string.IsNullOrEmpty(externalRef))
            {
                return this.Error().InvalidParameters();
            }
            var d = _demographicRepository.GetByExternalRef(externalRef);
            if (d == null)
            {
                return NotFound();
            }
            return Ok(_mapper.Map<DemographicModel>(d));
        }

        /// <summary>
        /// Creates demographics, updates any existing demographics
        /// </summary>
        /// <param name="commands">Demographics</param>
        [Route("")]
        [AuthorizeRequest("Demographics")]
        public IHttpActionResult Post([FromBody] List<CreateDemographicModel> commands)
        {
            if (commands == null || !commands.Any() || !ModelState.IsValid)
            {
                return this.Error().InvalidParameters();
            }

            if (commands.Any(cmd => cmd is null))
            {
                return this.Error().InvalidParameters("Demographics cannot be null");
            }

            if (commands.Select(c => c.ExternalRef).Distinct().Count() != commands.Count)
            {
                return this.Error().InvalidParameters("ExternalRef must be unique");
            }

            if (commands.Any(c => String.IsNullOrEmpty(c.ExternalRef)))
            {
                return this.Error().InvalidParameters("ExternalRef is not set");
            }

            var externalRefs = commands.Select(x => x.ExternalRef).ToList();
            var existingDemographic = _demographicRepository.GetByExternalRef(externalRefs);

            var addDemographic = commands.Where(c => existingDemographic.All(ex => ex.ExternalRef != c.ExternalRef));

            _demographicRepository.Add(_mapper.Map<IEnumerable<Demographic>>(addDemographic));

            var updateDemographic = existingDemographic.Select(updated =>
            {
                var changes = commands.First(ex => ex.ExternalRef == updated.ExternalRef);
                _mapper.Map(changes, updated);
                return updated;
            });

            _demographicRepository.UpdateRange(updateDemographic);

            _demographicRepository.SaveChanges();

            return Ok();
        }

        /// <summary>
        /// Validates the Demographic prior to save
        /// </summary>
        /// <param name="demographic"></param>
        private void ValidateForSave(Demographic demographic)
        {
            if (string.IsNullOrEmpty(demographic.ExternalRef))
            {
                throw new System.Exception("ExternalRef is not set");
            }
            if (string.IsNullOrEmpty(demographic.Name))
            {
                throw new System.Exception("Name is not set");
            }
            if (string.IsNullOrEmpty(demographic.ShortName))
            {
                throw new System.Exception("Short Name is not set");
            }
        }

        /// <summary>
        /// Update the demographic by Id
        /// </summary>
        [Route("")]
        [AuthorizeRequest("Demographics")]
        public IHttpActionResult PutById([FromUri] int id, [FromBody] CreateDemographicModel command)
        {
            if (command == null || !ModelState.IsValid)
            {
                return this.Error().InvalidParameters();
            }
            var d = _demographicRepository.GetById(id);
            if (d == null)
            {
                return NotFound();
            }

            d.ExternalRef = command.ExternalRef;
            d.Update(command.Name,
                        command.ShortName,
                        command.DisplayOrder,
                        command.Gameplan);
            ValidateForSave(d);

            // Check that ExternalRef is unique
            var d2 = _demographicRepository.GetByExternalRef(d.ExternalRef);
            if (d2 != null && d2.Id != d.Id)
            {
                return this.Error().InvalidParameters("ExternalRef must be unique");
            }
            _demographicRepository.Update(d);
            return Ok();
        }

        /// <summary>
        /// Update the demographic by ExternalRef
        /// </summary>
        [Route("externalref/{externalRef}")]
        [AuthorizeRequest("Demographics")]
        public IHttpActionResult PutByExternalRef([FromUri] string externalRef, [FromBody] CreateDemographicModel command)
        {
            if (command == null || !ModelState.IsValid)
            {
                return this.Error().InvalidParameters();
            }
            var d = _demographicRepository.GetByExternalRef(externalRef);
            if (d == null)
            {
                return NotFound();
            }

            d.Update(command.Name,
                     command.ShortName,
                     command.DisplayOrder,
                     command.Gameplan);
            ValidateForSave(d);

            _demographicRepository.Update(d);
            return Ok();
        }

        /// <summary>
        /// Delete demographic by Id
        /// </summary>
        /// <param name="id">Id</param>
        [Route("{id}")]
        [AuthorizeRequest("Demographics")]
        public IHttpActionResult DeleteById([FromUri] int id)
        {
            if (!ModelState.IsValid)
            {
                return this.Error().InvalidParameters();
            }
            var demographic = _demographicRepository.GetById(id);
            if (demographic == null)
            {
                return this.NotFound();
            }
            _demographicRepository.Delete(id);
            return Ok();
        }

        /// <summary>
        /// Delete demographic by ExternalRef
        /// </summary>
        /// <param name="externalRef">Id</param>
        [Route("externalref/{externalRef}")]
        [AuthorizeRequest("Demographics")]
        public IHttpActionResult DeleteByExternalRef([FromUri] string externalRef)
        {
            if (!ModelState.IsValid || string.IsNullOrEmpty(externalRef))
            {
                return this.Error().InvalidParameters();
            }
            var demographic = _demographicRepository.GetByExternalRef(externalRef);
            if (demographic == null)
            {
                return this.NotFound();
            }
            _demographicRepository.Delete(demographic.Id);
            return Ok();
        }

        /// <summary>
        /// Deletes all demographics
        /// </summary>
        [Route("DeleteAll")]
        [AuthorizeRequest("Demographics")]
        public IHttpActionResult DeleteAll()
        {
            // Validate that we can delete
            _dataChangeValidator.ThrowExceptionIfAnyErrors(_dataChangeValidator.ValidateChange<Demographic>(ChangeActions.Delete, ChangeTargets.AllItems, null));
            //delete
            _demographicRepository.Truncate();
            return Ok();
        }
    }
}
