// <auto-generated />
using System;
using ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration;
using ImagineCommunications.GamePlan.Persistence.SqlServer.Migrations.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ImagineCommunications.GamePlan.Persistence.SqlServer.Migrations.TenantMigrations
{
    [DbContext(typeof(TenantMigrationDbContext))]
    [Migration("20200225120916_XGGT-1698-smooth-only-handheld-spots")]
    partial class XGGT1698smoothonlyhandheldspots
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AWSInstanceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<string>("InstanceType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("StorageSizeGb");

                    b.HasKey("Id");

                    b.ToTable("AWSInstanceConfigurations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Api")
                        .HasMaxLength(256);

                    b.Property<string>("AutoBookId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("InstanceConfigurationId");

                    b.Property<DateTime>("LastRunCompleted");

                    b.Property<DateTime>("LastRunStarted");

                    b.Property<bool>("Locked");

                    b.Property<short>("Status");

                    b.Property<DateTime>("TimeCreated");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookId")
                        .IsUnique();

                    b.ToTable("AutoBooks");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookInstanceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CloudProvider");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AutoBookInstanceConfigurations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookInstanceConfigurationCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoBookInstanceConfigurationId");

                    b.Property<int?>("MaxBreaks");

                    b.Property<int?>("MaxCampaigns");

                    b.Property<int?>("MaxDays");

                    b.Property<int?>("MaxDemographics");

                    b.Property<int?>("MaxSalesAreas");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookInstanceConfigurationId");

                    b.ToTable("AutoBookInstanceConfigurationCriterias");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationVersion")
                        .HasMaxLength(256);

                    b.Property<bool>("AutoProvisioning");

                    b.Property<DateTime>("AutoProvisioningLastActive");

                    b.Property<string>("BinariesVersion")
                        .HasMaxLength(256);

                    b.Property<long>("CreationTimeout");

                    b.Property<bool>("Locked");

                    b.Property<int>("MaxInstances");

                    b.Property<long>("MaxLifetime");

                    b.Property<int>("MinInstances");

                    b.Property<long>("MinLifetime");

                    b.Property<string>("ProvisioningAPIURL")
                        .HasMaxLength(256);

                    b.Property<int>("SystemMaxInstances");

                    b.HasKey("Id");

                    b.ToTable("AutoBookSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoBookId");

                    b.Property<Guid>("RunId");

                    b.Property<Guid>("ScenarioId");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookId")
                        .IsUnique();

                    b.ToTable("AutoBookTasks");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgAval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AutoBookDefaultParametersId");

                    b.Property<int>("OpenAvail");

                    b.Property<int>("SalesAreaNo");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookDefaultParametersId");

                    b.ToTable("AgAvals");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AgCampaignProgrammeRequirement_Required");

                    b.Property<double>("AgCampaignProgrammeRequirement_SareRequired");

                    b.Property<double>("AgCampaignProgrammeRequirement_Supplied");

                    b.Property<double>("AgCampaignProgrammeRequirement_TgtRequired");

                    b.Property<Guid>("AutoBookDefaultParametersId");

                    b.Property<string>("EndDate")
                        .HasMaxLength(32);

                    b.Property<int>("NbrCategoryOrProgrammeList");

                    b.Property<int>("NbrSalesAreas");

                    b.Property<int>("NumberTimeBands");

                    b.Property<string>("SalesAreas");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AutoBookDefaultParametersId");

                    b.ToTable("AgCampaignProgrammes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignProgrammeProgrammeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignProgrammeId");

                    b.Property<int>("CategoryNumber");

                    b.Property<int>("ProgrammeNumber");

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignProgrammeId");

                    b.ToTable("AgCampaignProgrammeProgrammeCategories");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignSalesAreaPtrRef_ClassId");

                    b.Property<int>("AgCampaignSalesAreaPtrRef_SalesAreaNo");

                    b.Property<double>("AgSalesAreaCampaignRequirement_Required");

                    b.Property<double>("AgSalesAreaCampaignRequirement_SareRequired");

                    b.Property<double>("AgSalesAreaCampaignRequirement_Supplied");

                    b.Property<double>("AgSalesAreaCampaignRequirement_TgtRequired");

                    b.Property<Guid>("AutoBookDefaultParametersId");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("CentreBreakRatio");

                    b.Property<int>("ChannelGroupNo");

                    b.Property<int>("EndBreakRatio");

                    b.Property<int>("MaxBreaks");

                    b.Property<int>("MultiPartOnly");

                    b.Property<int>("NbrAgDayParts");

                    b.Property<int>("NbrAgLengths");

                    b.Property<int>("NbrAgStrikeWeights");

                    b.Property<int>("NbrParts");

                    b.Property<int>("NbrPartsLengths");

                    b.Property<double>("RevenuePercentage");

                    b.Property<int>("SalesAreaNo");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookDefaultParametersId");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasFilter("Type = 1");

                    b.ToTable("AgCampaignSalesAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgDayPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignSalesAreaId");

                    b.Property<double>("AgDayPartRequirement_Required");

                    b.Property<double>("AgDayPartRequirement_SareRequired");

                    b.Property<double>("AgDayPartRequirement_Supplied");

                    b.Property<double>("AgDayPartRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("DayPartNo");

                    b.Property<string>("EndDate")
                        .HasMaxLength(32);

                    b.Property<int>("NbrAgDayPartLengths");

                    b.Property<int>("NbrAgTimeSlices");

                    b.Property<int>("SalesAreaNo");

                    b.Property<int>("SpotMaxRatings");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignSalesAreaId");

                    b.ToTable("AgDayParts");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgDayPartLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgDayPartId");

                    b.Property<double>("AgPartLengthRequirement_Required");

                    b.Property<double>("AgPartLengthRequirement_SareRequired");

                    b.Property<double>("AgPartLengthRequirement_Supplied");

                    b.Property<double>("AgPartLengthRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("DayPartNo");

                    b.Property<int>("DayPartType");

                    b.Property<int>("MultipartNumber");

                    b.Property<int>("SalesAreaNo");

                    b.Property<long>("SpotLength");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgDayPartId");

                    b.ToTable("AgDayPartLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignSalesAreaId");

                    b.Property<double>("AgLengthRequirement_Required");

                    b.Property<double>("AgLengthRequirement_SareRequired");

                    b.Property<double>("AgLengthRequirement_Supplied");

                    b.Property<double>("AgLengthRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("MultiPartNo");

                    b.Property<int>("NbrAgMultiParts");

                    b.Property<int>("NoOfSpots");

                    b.Property<double>("PriceFactor");

                    b.Property<int>("SalesAreaNo");

                    b.Property<int>("SpotLength");

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignSalesAreaId");

                    b.ToTable("AgLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgMultiPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgLengthId");

                    b.Property<int>("BookingPosition");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("MultiPartNo");

                    b.Property<double>("PriceFactor");

                    b.Property<int>("SalesAreaNo");

                    b.Property<int>("SeqNo");

                    b.Property<int>("SpotLength");

                    b.HasKey("Id");

                    b.HasIndex("AgLengthId");

                    b.ToTable("AgMultiParts");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignSalesAreaId");

                    b.Property<double>("AgPartRequirement_Required");

                    b.Property<double>("AgPartRequirement_SareRequired");

                    b.Property<double>("AgPartRequirement_Supplied");

                    b.Property<double>("AgPartRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("DayPartNo");

                    b.Property<int>("SalesAreaNo");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignSalesAreaId");

                    b.ToTable("AgParts");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgPartLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignSalesAreaId");

                    b.Property<double>("AgPartLengthRequirement_Required");

                    b.Property<double>("AgPartLengthRequirement_SareRequired");

                    b.Property<double>("AgPartLengthRequirement_Supplied");

                    b.Property<double>("AgPartLengthRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("DayPartNo");

                    b.Property<int>("DayPartType");

                    b.Property<int>("MultipartNumber");

                    b.Property<int>("SalesAreaNo");

                    b.Property<long>("SpotLength");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignSalesAreaId");

                    b.ToTable("AgPartLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AutoBookDefaultParametersId");

                    b.Property<int>("DemographicNo");

                    b.Property<double>("NoOfRtgs");

                    b.Property<int>("SalesAreaNo");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookDefaultParametersId");

                    b.ToTable("AgPredictions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgRegionalBreak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AutoBookDefaultParametersId");

                    b.Property<int>("OpenAvail");

                    b.Property<int>("TregNo");

                    b.HasKey("Id");

                    b.HasIndex("AutoBookDefaultParametersId");

                    b.ToTable("AgRegionalBreaks");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgStrikeWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignSalesAreaId");

                    b.Property<double>("AgStikeWeightRequirement_Required");

                    b.Property<double>("AgStikeWeightRequirement_SareRequired");

                    b.Property<double>("AgStikeWeightRequirement_Supplied");

                    b.Property<double>("AgStikeWeightRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<string>("EndDate")
                        .HasMaxLength(32);

                    b.Property<int>("NbrAgStrikeWeightLengths");

                    b.Property<int>("SalesAreaNo");

                    b.Property<int>("SpotMaxRatings");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignSalesAreaId");

                    b.ToTable("AgStrikeWeights");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgStrikeWeightLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgStrikeWeightId");

                    b.Property<double>("AgStrikeWeightLengthRequirement_Required");

                    b.Property<double>("AgStrikeWeightLengthRequirement_SareRequired");

                    b.Property<double>("AgStrikeWeightLengthRequirement_Supplied");

                    b.Property<double>("AgStrikeWeightLengthRequirement_TgtRequired");

                    b.Property<int>("CampaignNo");

                    b.Property<string>("EndDate")
                        .HasMaxLength(32);

                    b.Property<int>("MultiPartNo");

                    b.Property<int>("SalesAreaNo");

                    b.Property<int>("SpotLength");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgStrikeWeightId");

                    b.ToTable("AgStrikeWeightLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgTimeBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgCampaignProgrammeId");

                    b.Property<int>("Days");

                    b.Property<string>("EndTime")
                        .HasMaxLength(32);

                    b.Property<string>("StartTime")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgCampaignProgrammeId");

                    b.ToTable("AgTimeBands");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgTimeSlice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgDayPartId");

                    b.Property<int>("CampaignNo");

                    b.Property<int>("DayPartNo");

                    b.Property<int>("EndDay");

                    b.Property<string>("EndTime")
                        .HasMaxLength(32);

                    b.Property<int>("SalesAreaNo");

                    b.Property<string>("StartDate")
                        .HasMaxLength(32);

                    b.Property<int>("StartDay");

                    b.Property<string>("StartTime")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AgDayPartId");

                    b.ToTable("AgTimeSlices");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AutoBookDefaultParameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("AgBreak_AgProgCategories");

                    b.Property<int>("AgBreak_AgSalesAreaPtrRef_ClassId");

                    b.Property<int>("AgBreak_AgSalesAreaPtrRef_SalesAreaNo");

                    b.Property<int>("AgBreak_BreakNo");

                    b.Property<string>("AgBreak_BreakTypeCode")
                        .HasMaxLength(32);

                    b.Property<int>("AgBreak_DayNumber");

                    b.Property<int>("AgBreak_Duration");

                    b.Property<int>("AgBreak_EpisNo");

                    b.Property<string>("AgBreak_ExternalNo")
                        .HasMaxLength(64);

                    b.Property<string>("AgBreak_LongForm")
                        .HasMaxLength(512);

                    b.Property<int>("AgBreak_MaxPrgcs");

                    b.Property<int>("AgBreak_NbrAvals");

                    b.Property<int>("AgBreak_NbrBkrgs");

                    b.Property<int>("AgBreak_NbrPreds");

                    b.Property<int>("AgBreak_NbrPrgcs");

                    b.Property<int>("AgBreak_NbrZeroBkrgs");

                    b.Property<string>("AgBreak_NominalTime")
                        .HasMaxLength(32);

                    b.Property<string>("AgBreak_PositionInProg")
                        .HasMaxLength(64);

                    b.Property<int>("AgBreak_ProgEventNo");

                    b.Property<int>("AgBreak_ProgNo");

                    b.Property<int>("AgBreak_SalesAreaId");

                    b.Property<int>("AgBreak_SalesAreaNo");

                    b.Property<string>("AgBreak_ScheduledDate")
                        .HasMaxLength(32);

                    b.Property<string>("AgBreak_Solus")
                        .HasMaxLength(32);

                    b.Property<int>("AgBreak_Uid");

                    b.Property<string>("AgCampaign_AdvertiserIdentifier")
                        .HasMaxLength(256);

                    b.Property<double>("AgCampaign_AgCampaignRequirement_Required");

                    b.Property<double>("AgCampaign_AgCampaignRequirement_SareRequired");

                    b.Property<double>("AgCampaign_AgCampaignRequirement_Supplied");

                    b.Property<double>("AgCampaign_AgCampaignRequirement_TgtRequired");

                    b.Property<int>("AgCampaign_BusinesssAreaNo");

                    b.Property<int>("AgCampaign_CampaignNo");

                    b.Property<int>("AgCampaign_CampaignSpotMaxRatings");

                    b.Property<string>("AgCampaign_ClashCode")
                        .HasMaxLength(64);

                    b.Property<int>("AgCampaign_ClashNo");

                    b.Property<string>("AgCampaign_ClearanceCode")
                        .HasMaxLength(64);

                    b.Property<int>("AgCampaign_DealNo");

                    b.Property<int>("AgCampaign_DeliveryCurrency");

                    b.Property<int>("AgCampaign_DemographicNo");

                    b.Property<string>("AgCampaign_EndDate")
                        .HasMaxLength(32);

                    b.Property<string>("AgCampaign_ExternalNo")
                        .HasMaxLength(64);

                    b.Property<int>("AgCampaign_IncludeFunctions");

                    b.Property<int>("AgCampaign_MaxAgCampagignSalesArea");

                    b.Property<string>("AgCampaign_MultiPartFlag")
                        .HasMaxLength(64);

                    b.Property<int>("AgCampaign_NbrAgCampagignSalesArea");

                    b.Property<int>("AgCampaign_NbrAgCampaignProgrammeList");

                    b.Property<int>("AgCampaign_ProductCode");

                    b.Property<int>("AgCampaign_RevenueBudget");

                    b.Property<string>("AgCampaign_RootClashCode")
                        .HasMaxLength(64);

                    b.Property<string>("AgCampaign_StartDate")
                        .HasMaxLength(32);

                    b.Property<int>("AgExposure_BreakSalesAreaNo");

                    b.Property<string>("AgExposure_ClashCode")
                        .HasMaxLength(64);

                    b.Property<string>("AgExposure_EndDate")
                        .HasMaxLength(32);

                    b.Property<int>("AgExposure_EndDay");

                    b.Property<string>("AgExposure_EndTime")
                        .HasMaxLength(32);

                    b.Property<string>("AgExposure_MasterClashCode")
                        .HasMaxLength(64);

                    b.Property<int>("AgExposure_NoOfExposures");

                    b.Property<string>("AgExposure_StartDate")
                        .HasMaxLength(32);

                    b.Property<int>("AgExposure_StartDay");

                    b.Property<string>("AgExposure_StartTime")
                        .HasMaxLength(32);

                    b.Property<int>("AgHfssDemo_BaseDemoNo");

                    b.Property<string>("AgHfssDemo_BreakScheduledDate")
                        .HasMaxLength(32);

                    b.Property<int>("AgHfssDemo_IndexDemoNo");

                    b.Property<int>("AgHfssDemo_IndexType");

                    b.Property<int>("AgHfssDemo_SalesAreaNo");

                    b.Property<int>("AgISRTimeBand_Days");

                    b.Property<string>("AgISRTimeBand_EndTime")
                        .HasMaxLength(32);

                    b.Property<string>("AgISRTimeBand_Exclude")
                        .HasMaxLength(16);

                    b.Property<string>("AgISRTimeBand_StartTime")
                        .HasMaxLength(32);

                    b.Property<int>("AgPeakStartEndTime_DayPartNumber");

                    b.Property<int>("AgPeakStartEndTime_EndDayOfDayPart");

                    b.Property<string>("AgPeakStartEndTime_EndTimeOfDayPart")
                        .HasMaxLength(32);

                    b.Property<int>("AgPeakStartEndTime_MidPoint");

                    b.Property<string>("AgPeakStartEndTime_Name")
                        .HasMaxLength(256);

                    b.Property<int>("AgPeakStartEndTime_SalesArea");

                    b.Property<int>("AgPeakStartEndTime_ScenarioNumber");

                    b.Property<int>("AgPeakStartEndTime_StartDayOfDayPart");

                    b.Property<string>("AgPeakStartEndTime_StartTimeOfDayPart")
                        .HasMaxLength(32);

                    b.Property<int>("AgProgRestriction_CampaignNo");

                    b.Property<int>("AgProgRestriction_EpisNo");

                    b.Property<string>("AgProgRestriction_IncludeExcludeFlag")
                        .HasMaxLength(64);

                    b.Property<int>("AgProgRestriction_PrgcNo");

                    b.Property<int>("AgProgRestriction_ProgNo");

                    b.Property<int>("AgProgRestriction_SalesAreaNo");

                    b.Property<string>("AgProgTxDetail_ClassCode")
                        .HasMaxLength(64);

                    b.Property<int>("AgProgTxDetail_EpisodeNo");

                    b.Property<string>("AgProgTxDetail_LiveBroadcast")
                        .HasMaxLength(16);

                    b.Property<int>("AgProgTxDetail_ProgCategoryNo");

                    b.Property<int>("AgProgTxDetail_ProgrammeNo");

                    b.Property<int>("AgProgTxDetail_SalesAreaNo");

                    b.Property<string>("AgProgTxDetail_ScheduledEndTime")
                        .HasMaxLength(32);

                    b.Property<string>("AgProgTxDetail_ScheduledStartTime")
                        .HasMaxLength(32);

                    b.Property<int>("AgProgTxDetail_TregNo");

                    b.Property<string>("AgProgTxDetail_TxDate")
                        .HasMaxLength(32);

                    b.Property<string>("AgRestriction_ClashCode")
                        .HasMaxLength(64);

                    b.Property<string>("AgRestriction_ClearanceCode")
                        .HasMaxLength(64);

                    b.Property<int>("AgRestriction_CopyCode");

                    b.Property<string>("AgRestriction_EndDate")
                        .HasMaxLength(32);

                    b.Property<string>("AgRestriction_EndTime")
                        .HasMaxLength(32);

                    b.Property<int>("AgRestriction_EpisodeNo");

                    b.Property<int>("AgRestriction_IndexThreshold");

                    b.Property<int>("AgRestriction_IndexType");

                    b.Property<string>("AgRestriction_LiveBroadcastFlag")
                        .HasMaxLength(16);

                    b.Property<int>("AgRestriction_ProductCode");

                    b.Property<int>("AgRestriction_ProgCategoryNo");

                    b.Property<string>("AgRestriction_ProgClassCode")
                        .HasMaxLength(64);

                    b.Property<string>("AgRestriction_ProgClassFlag")
                        .HasMaxLength(16);

                    b.Property<int>("AgRestriction_ProgrammeNo");

                    b.Property<string>("AgRestriction_PublicHolidayIndicator")
                        .HasMaxLength(64);

                    b.Property<int>("AgRestriction_RestrictionDays");

                    b.Property<int>("AgRestriction_RestrictionType");

                    b.Property<int>("AgRestriction_SalesAreaNo");

                    b.Property<string>("AgRestriction_SchoolHolidayIndicator")
                        .HasMaxLength(64);

                    b.Property<string>("AgRestriction_StartDate")
                        .HasMaxLength(32);

                    b.Property<string>("AgRestriction_StartTime")
                        .HasMaxLength(32);

                    b.Property<int>("AgRestriction_TimeToleranceMinsAfter");

                    b.Property<int>("AgRestriction_TimeToleranceMinsBefore");

                    b.Property<string>("AgSpot_AdvertiserIdentifier")
                        .HasMaxLength(256);

                    b.Property<string>("AgSpot_BonusSpot")
                        .HasMaxLength(64);

                    b.Property<int>("AgSpot_BookingPosition");

                    b.Property<string>("AgSpot_BreakDate")
                        .HasMaxLength(32);

                    b.Property<int>("AgSpot_BreakNo");

                    b.Property<int>("AgSpot_BreakSalesAreaNo");

                    b.Property<string>("AgSpot_BreakTime")
                        .HasMaxLength(32);

                    b.Property<int>("AgSpot_CampaignNo");

                    b.Property<string>("AgSpot_ClashCode")
                        .HasMaxLength(64);

                    b.Property<string>("AgSpot_ClientPicked")
                        .HasMaxLength(16);

                    b.Property<int>("AgSpot_ISRLocked");

                    b.Property<string>("AgSpot_MultipartIndicator")
                        .HasMaxLength(16);

                    b.Property<int>("AgSpot_PreempteeStatus");

                    b.Property<int>("AgSpot_PreemptorStatus");

                    b.Property<double>("AgSpot_PriceFactor");

                    b.Property<int>("AgSpot_ProductCode");

                    b.Property<string>("AgSpot_RootClashCode")
                        .HasMaxLength(64);

                    b.Property<int>("AgSpot_SpotLength");

                    b.Property<int>("AgSpot_SpotNo");

                    b.Property<int>("AgSpot_SpotSalesAreaNo");

                    b.Property<string>("AgSpot_Status")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AutoBookDefaultParameters");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutopilotRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<int>("FlexibilityLevelId");

                    b.Property<int>("LoosenBit");

                    b.Property<int>("LoosenLot");

                    b.Property<int>("RuleId");

                    b.Property<int>("RuleTypeId");

                    b.Property<int>("TightenBit");

                    b.Property<int>("TightenLot");

                    b.HasKey("Id");

                    b.ToTable("AutopilotRules");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutopilotSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultFlexibilityLevelId");

                    b.Property<int>("ScenariosToGenerate");

                    b.HasKey("Id");

                    b.ToTable("AutopilotSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Breaks.Break", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<long>("Avail");

                    b.Property<string>("BreakType")
                        .HasMaxLength(32);

                    b.Property<int>("CustomId");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<long>("Duration");

                    b.Property<string>("ExternalBreakRef")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalProgRef")
                        .HasMaxLength(64);

                    b.Property<bool>("Optimize");

                    b.Property<long>("OptimizerAvail");

                    b.Property<int>("PositionInProg");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ScheduledDate");

                    b.HasKey("Id");

                    b.HasIndex("ExternalBreakRef");

                    b.HasIndex("ExternalProgRef");

                    b.HasIndex("SalesArea");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("SalesArea", "ScheduledDate", "CustomId", "BreakType", "Duration", "Avail", "OptimizerAvail", "Optimize", "ExternalBreakRef", "Description", "ExternalProgRef", "PositionInProg")
                        .HasName("IX_ScheduleBreaks_Summary");

                    b.ToTable("Breaks");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Breaks.BreakEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("BreakId");

                    b.Property<string>("Demographic")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<double>("Efficiency");

                    b.HasKey("Id");

                    b.HasIndex("BreakId");

                    b.HasIndex("Demographic");

                    b.ToTable("BreaksEfficiencies");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<double>("ActualRatings");

                    b.Property<string>("BusinessType")
                        .HasMaxLength(32);

                    b.Property<string>("CampaignGroup")
                        .HasMaxLength(32);

                    b.Property<int>("CampaignPassPriority");

                    b.Property<int>("CampaignSpotMaxRatings");

                    b.Property<int>("CustomId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Demographic")
                        .HasMaxLength(64);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<string>("ExpectedClearanceCode")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalId")
                        .HasMaxLength(64);

                    b.Property<bool>("IncludeOptimisation");

                    b.Property<bool>("IncludeRightSizer");

                    b.Property<bool>("InefficientSpotRemoval");

                    b.Property<bool>("IsPercentage");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("Product")
                        .HasMaxLength(64);

                    b.Property<double>("RevenueBudget");

                    b.Property<int?>("RightSizerLevel");

                    b.Property<string>("SearchTokens")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ',[CampaignGroup],[Name],[ExternalId],[BusinessType])");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("Status");

                    b.Property<double>("TargetRatings");

                    b.HasKey("Id");

                    b.HasIndex("CustomId")
                        .IsUnique();

                    b.HasIndex("Demographic");

                    b.HasIndex("ExpectedClearanceCode");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Product");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignBreakType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CampaignId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignBreakTypes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CampaignId");

                    b.Property<int>("IsCategoryOrProgramme");

                    b.Property<int>("IsIncludeOrExclude");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignProgrammeRestrictions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestrictionCategoryOrProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignProgrammeRestrictionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CampaignProgrammeRestrictionId");

                    b.HasIndex("Name");

                    b.ToTable("CampaignProgrammeRestrictionsCategoryOrProgramme");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestrictionSalesArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignProgrammeRestrictionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CampaignProgrammeRestrictionId");

                    b.HasIndex("Name");

                    b.ToTable("CampaignProgrammeRestrictionsSalesAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CampaignId");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("SalesArea");

                    b.ToTable("CampaignSalesAreaTargets");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignSalesAreaTargetId");

                    b.Property<string>("GroupName")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CampaignSalesAreaTargetId")
                        .IsUnique();

                    b.ToTable("CampaignSalesAreaTargetGroups");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetGroupSalesArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignSalesAreaTargetGroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CampaignSalesAreaTargetGroupId");

                    b.HasIndex("Name");

                    b.ToTable("CampaignSalesAreaTargetGroupSalesAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetMultipart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignSalesAreaTargetId");

                    b.Property<int>("CurrentPercentageSplit");

                    b.Property<int>("DesiredPercentageSplit");

                    b.Property<int>("MultipartNumber");

                    b.HasKey("Id");

                    b.HasIndex("CampaignSalesAreaTargetId");

                    b.ToTable("CampaignSalesAreaTargetMultiparts");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetMultipartLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignSalesAreaTargetMultipartId");

                    b.Property<long>("Length");

                    b.HasKey("Id");

                    b.HasIndex("CampaignSalesAreaTargetMultipartId");

                    b.ToTable("CampaignSalesAreaTargetMultipartLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignSalesAreaTargetId");

                    b.HasKey("Id");

                    b.HasIndex("CampaignSalesAreaTargetId");

                    b.ToTable("CampaignTargets");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignTargetId");

                    b.Property<int>("CurrentPercentageSplit");

                    b.Property<int>("DesiredPercentageSplit");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("SpotMaxRatings");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTargetId");

                    b.ToTable("CampaignTargetStrikeWeights");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignTargetStrikeWeightId");

                    b.Property<int>("CurrentPercentageSplit");

                    b.Property<int>("DesiredPercentageSplit");

                    b.Property<int>("SpotMaxRatings");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTargetStrikeWeightId");

                    b.ToTable("CampaignTargetStrikeWeightDayParts");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPartLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignTargetStrikeWeightDayPartId");

                    b.Property<int>("CurrentPercentageSplit");

                    b.Property<int>("DesiredPercentageSplit");

                    b.Property<long>("Length");

                    b.Property<int>("MultipartNumber");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTargetStrikeWeightDayPartId");

                    b.ToTable("CampaignTargetStrikeWeightDayPartLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPartTimeSlice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignTargetStrikeWeightDayPartId");

                    b.Property<string>("DowPattern")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<long>("FromTime");

                    b.Property<long>("ToTime");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTargetStrikeWeightDayPartId");

                    b.ToTable("CampaignTargetStrikeWeightDayPartTimeSlices");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignTargetStrikeWeightId");

                    b.Property<int>("CurrentPercentageSplit");

                    b.Property<int>("DesiredPercentageSplit");

                    b.Property<long>("Length");

                    b.Property<int>("MultipartNumber");

                    b.HasKey("Id");

                    b.HasIndex("CampaignTargetStrikeWeightId");

                    b.ToTable("CampaignTargetStrikeWeightLengths");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTimeRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CampaignId");

                    b.Property<string>("DowPattern")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<int>("IsIncludeOrExclude");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTimeRestrictions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTimeRestrictionSalesArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignTimeRestrictionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CampaignTimeRestrictionId");

                    b.HasIndex("Name");

                    b.ToTable("CampaignTimeRestrictionsSalesAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("ShortName")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ShortName")
                        .IsUnique()
                        .HasFilter("[ShortName] IS NOT NULL");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Clash", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("DefaultOffPeakExposureCount");

                    b.Property<int>("DefaultPeakExposureCount");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Externalref")
                        .HasMaxLength(64);

                    b.Property<string>("ParentExternalidentifier")
                        .HasMaxLength(64);

                    b.Property<string>("TokenizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', Externalref, Description)");

                    b.HasKey("Uid");

                    b.HasIndex("Description");

                    b.HasIndex("Externalref");

                    b.HasIndex("ParentExternalidentifier");

                    b.ToTable("Clashes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashDifference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClashId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("OffPeakExposureCount");

                    b.Property<int?>("PeakExposureCount");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ClashId");

                    b.HasIndex("SalesArea");

                    b.ToTable("ClashDifferences");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashDifferenceTimeAndDow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClashDifferenceId");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<long?>("EndTime");

                    b.Property<long?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ClashDifferenceId")
                        .IsUnique();

                    b.ToTable("ClashDifferenceTimeAndDows");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashExceptions.ClashException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("FromType")
                        .HasMaxLength(32);

                    b.Property<string>("FromValue")
                        .HasMaxLength(64);

                    b.Property<int>("IncludeOrExclude");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("ToType")
                        .HasMaxLength(32);

                    b.Property<string>("ToValue")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("ClashExceptions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashExceptions.ClashExceptionsTimeAndDow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClashExceptionId");

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(32);

                    b.Property<long?>("EndTime");

                    b.Property<long?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ClashExceptionId");

                    b.ToTable("ClashExceptionsTimeAndDows");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClearanceCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("ClearanceCodes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Demographic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("ExternalRef")
                        .HasMaxLength(64);

                    b.Property<bool>("Gameplan");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("ShortName")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ExternalRef");

                    b.ToTable("Demographics");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EfficiencySettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<int?>("DefaultNumberOfWeeks");

                    b.Property<int>("EfficiencyCalculationPeriod");

                    b.Property<int>("PersistEfficiency");

                    b.HasKey("Id");

                    b.ToTable("EfficiencySettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailAuditEventSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailCreatorId")
                        .HasMaxLength(64);

                    b.Property<int>("EventTypeId");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EmailAuditEventSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Failure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Campaign");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(256);

                    b.Property<string>("ExternalId")
                        .HasMaxLength(256);

                    b.Property<long>("Failures");

                    b.Property<string>("SalesAreaName")
                        .HasMaxLength(512);

                    b.Property<Guid>("ScenarioId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Failures");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FlexibilityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FlexibilityLevels");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FaultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FaultTypes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FaultTypeDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("FaultTypeId");

                    b.Property<string>("LanguageAbbreviation")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("Id");

                    b.HasIndex("FaultTypeId");

                    b.ToTable("FaultTypeDescriptions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("Id");

                    b.ToTable("FunctionalAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalAreaDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("FunctionalAreaId");

                    b.Property<string>("LanguageAbbreviation")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("Id");

                    b.HasIndex("FunctionalAreaId");

                    b.ToTable("FunctionalAreaDescriptions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalAreaFaultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FaultTypeId");

                    b.Property<Guid>("FunctionalAreaId");

                    b.Property<bool>("IsSelected")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("FaultTypeId")
                        .IsUnique();

                    b.HasIndex("FunctionalAreaId");

                    b.ToTable("FunctionalAreaFaultTypes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ISRGlobalSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ExcludeSpotsBookedByProgrammeRequirements");

                    b.HasKey("Id");

                    b.ToTable("ISRGlobalSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ISRSettings.ISRDemographicSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DemographicId")
                        .HasMaxLength(64);

                    b.Property<int>("EfficiencyThreshold");

                    b.Property<int>("ISRSettingId");

                    b.HasKey("Id");

                    b.HasIndex("DemographicId");

                    b.HasIndex("ISRSettingId");

                    b.ToTable("ISRSettingsDemographics");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ISRSettings.ISRSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BreakType")
                        .HasMaxLength(64);

                    b.Property<int>("DefaultEfficiencyThreshold");

                    b.Property<long?>("EndTime");

                    b.Property<bool>("ExcludePublicHolidays");

                    b.Property<bool>("ExcludeSchoolHolidays");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<string>("SelectableDays")
                        .HasMaxLength(7);

                    b.Property<long?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("SalesArea");

                    b.ToTable("ISRSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.IndexType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseDemographicNo")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("BreakScheduleDate");

                    b.Property<int>("CustomId");

                    b.Property<string>("DemographicNo")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("BaseDemographicNo");

                    b.HasIndex("DemographicNo");

                    b.HasIndex("SalesArea");

                    b.ToTable("IndexTypes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.KPIComparisonConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("DiscernibleDifference");

                    b.Property<bool>("HigherIsBest");

                    b.Property<string>("KPIName")
                        .HasMaxLength(256);

                    b.Property<bool>("Ranked");

                    b.HasKey("Id");

                    b.ToTable("KPIComparisonConfigs");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alpha2")
                        .HasMaxLength(32);

                    b.Property<string>("Alpha3b")
                        .HasMaxLength(32);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.LibrarySalesAreaPassPriority", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("DowPattern")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<long?>("EndTime");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long?>("StartTime");

                    b.HasKey("Uid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LibrarySalesAreaPassPriorities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.MSTeamsAuditEventSettings.MSTeamsAuditEventSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventTypeId");

                    b.Property<string>("MessageCreatorId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("MSTeamsAuditEventSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Metadatas.MetadataCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MetadataCategories");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Metadatas.MetadataValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("ValueId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MetadataValues");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.OutputFiles.OutputFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoBookFileName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("OutputFiles");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.OutputFiles.OutputFileColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataType")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("OutputFileId");

                    b.HasKey("Id");

                    b.HasIndex("OutputFileId");

                    b.ToTable("OutputFileColumns");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool?>("IsLibraried");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("TokenizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', Id, Name)");

                    b.HasKey("Id");

                    b.HasIndex("IsLibraried");

                    b.HasIndex("Name");

                    b.ToTable("Passes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassBreakExclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<long?>("EndTime");

                    b.Property<int>("PassId");

                    b.Property<string>("SalesArea")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("SelectableDays")
                        .HasMaxLength(7);

                    b.Property<DateTime>("StartDate");

                    b.Property<long?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("PassId");

                    b.ToTable("PassBreakExclusions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassProgrammeRepetition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Factor");

                    b.Property<int>("Minutes");

                    b.Property<int>("PassId");

                    b.Property<double?>("PeakFactor");

                    b.HasKey("Id");

                    b.HasIndex("PassId");

                    b.ToTable("PassProgrammeRepetitions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<int>("Discriminator");

                    b.Property<string>("InternalType")
                        .HasMaxLength(64);

                    b.Property<int>("PassId");

                    b.Property<int>("RuleId");

                    b.Property<string>("Type")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("PassRules");

                    b.HasDiscriminator<int>("Discriminator");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSalesAreaPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PassSalesAreaPriorityCollectionId");

                    b.Property<int>("Priority");

                    b.Property<string>("SalesArea")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("PassSalesAreaPriorityCollectionId");

                    b.ToTable("PassSalesAreaPriorities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSalesAreaPriorityCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(7);

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("EndTime");

                    b.Property<bool>("IsMidnightTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOffPeakTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPeakTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("PassId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<long?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("PassId")
                        .IsUnique();

                    b.ToTable("PassSalesAreaPriorityCollection");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSlottingLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BandingTolerance");

                    b.Property<string>("Demographs")
                        .IsRequired()
                        .HasColumnName("Demographic")
                        .HasMaxLength(256);

                    b.Property<int>("MaximumEfficiency");

                    b.Property<int>("MinimumEfficiency");

                    b.Property<int>("PassId");

                    b.HasKey("Id");

                    b.HasIndex("PassId");

                    b.ToTable("PassSlottingLimits");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.PredictionSchedules.PredictionSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SalesArea")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("ScheduleDay");

                    b.HasKey("Id");

                    b.HasIndex("SalesArea");

                    b.HasIndex("SalesArea", "ScheduleDay");

                    b.ToTable("PredictionSchedules");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.PredictionSchedules.PredictionScheduleRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Demographic")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<double>("NoOfRatings");

                    b.Property<int>("PredictionScheduleId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("Demographic");

                    b.HasIndex("PredictionScheduleId");

                    b.ToTable("PredictionScheduleRatings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Product", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("AdvertiserIdentifier")
                        .HasMaxLength(64);

                    b.Property<DateTime>("AdvertiserLinkEndDate");

                    b.Property<DateTime>("AdvertiserLinkStartDate");

                    b.Property<string>("AdvertiserName")
                        .HasMaxLength(256);

                    b.Property<string>("AgencyIdentifier")
                        .HasMaxLength(64);

                    b.Property<DateTime>("AgencyLinkEndDate");

                    b.Property<string>("AgencyName")
                        .HasMaxLength(256);

                    b.Property<DateTime>("AgencyStartDate");

                    b.Property<string>("ClashCode")
                        .HasMaxLength(64);

                    b.Property<DateTime>("EffectiveEndDate");

                    b.Property<DateTime>("EffectiveStartDate");

                    b.Property<string>("Externalidentifier")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("ParentExternalidentifier")
                        .HasMaxLength(64);

                    b.Property<string>("TokenizedAdvertiser")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', AdvertiserIdentifier, AdvertiserName)");

                    b.Property<string>("TokenizedCampaign")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', AdvertiserName, AgencyName, Name)");

                    b.Property<string>("TokenizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', Externalidentifier, Name)");

                    b.HasKey("Uid");

                    b.HasIndex("AdvertiserIdentifier");

                    b.HasIndex("AdvertiserName");

                    b.HasIndex("AgencyName");

                    b.HasIndex("ClashCode");

                    b.HasIndex("Externalidentifier");

                    b.HasIndex("Name");

                    b.HasIndex("ParentExternalidentifier");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ProgrammeClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<int>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("ProgrammesClassifications");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ProgrammeDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("ExternalReference")
                        .IsUnique()
                        .HasFilter("[ExternalReference] IS NOT NULL");

                    b.ToTable("ProgrammesDictionaries");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Programmes.Programme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Classification")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<long>("Duration");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(64);

                    b.Property<bool>("LiveBroadcast");

                    b.Property<int>("PrgtNo");

                    b.Property<string>("ProgrammeName")
                        .HasMaxLength(128);

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<DateTime>("StartDateTime");

                    b.Property<string>("TokenizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', ExternalReference, ProgrammeName)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalReference");

                    b.HasIndex("SalesArea");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Programmes.ProgrammeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("ProgrammeId");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("ProgrammeCategories");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSGlobalSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ExcludeSpotsBookedByProgrammeRequirements");

                    b.HasKey("Id");

                    b.ToTable("RSGlobalSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSDemographicSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DemographicId")
                        .HasMaxLength(64);

                    b.Property<int>("RSSettingId");

                    b.HasKey("Id");

                    b.HasIndex("DemographicId");

                    b.HasIndex("RSSettingId");

                    b.ToTable("RSSettingsDemographicsSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("SalesArea");

                    b.ToTable("RSSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettingsDefaultDeliverySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DaysToCampaignEnd");

                    b.Property<int>("LowerLimitOfOverDelivery");

                    b.Property<int>("RSSettingId");

                    b.Property<int>("UpperLimitOfOverDelivery");

                    b.HasKey("Id");

                    b.HasIndex("RSSettingId");

                    b.ToTable("RSSettingsDefaultDeliverySettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettingsDemographicsDeliverySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DaysToCampaignEnd");

                    b.Property<int>("LowerLimitOfOverDelivery");

                    b.Property<int>("RSSettingsDemographicsSettingId");

                    b.Property<int>("UpperLimitOfOverDelivery");

                    b.HasKey("Id");

                    b.HasIndex("RSSettingsDemographicsSettingId");

                    b.ToTable("RSSettingsDemographicsDeliverySettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(1);

                    b.Property<string>("ActualPositionInBreak")
                        .HasMaxLength(64);

                    b.Property<int>("BreakBookingPosition");

                    b.Property<string>("BreakType")
                        .HasMaxLength(32);

                    b.Property<int>("CampaignPassPriority");

                    b.Property<double>("CampaignWeighting");

                    b.Property<bool>("ClientPicked");

                    b.Property<string>("Demographic")
                        .HasMaxLength(64);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<string>("ExternalBreakNo")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalCampaignNumber")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalProgrammeReference")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalSpotRef")
                        .HasMaxLength(64);

                    b.Property<bool>("Filler");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(64);

                    b.Property<string>("MultipartSpot")
                        .HasMaxLength(64);

                    b.Property<string>("MultipartSpotPosition")
                        .HasMaxLength(64);

                    b.Property<string>("MultipartSpotRef");

                    b.Property<int>("OptimiserPassSequenceNumber");

                    b.Property<int>("PassIterationSequence");

                    b.Property<string>("PassName")
                        .HasMaxLength(64);

                    b.Property<int>("PassSequence");

                    b.Property<bool>("Preemptable");

                    b.Property<int>("Preemptlevel");

                    b.Property<string>("Processor")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ProcessorDateTime");

                    b.Property<string>("Product")
                        .HasMaxLength(64);

                    b.Property<int>("RankOfCampaign");

                    b.Property<long>("RankOfEfficiency");

                    b.Property<string>("RequestedPositionInBreak")
                        .HasMaxLength(64);

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<Guid>("ScenarioId")
                        .HasMaxLength(64);

                    b.Property<bool>("Sponsored");

                    b.Property<double>("SpotEfficiency");

                    b.Property<long>("SpotLength");

                    b.Property<double>("SpotRating");

                    b.Property<long>("SpotSequenceNumber");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("Processor");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Restrictions.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClashCode")
                        .HasMaxLength(64);

                    b.Property<string>("ClearanceCode")
                        .HasMaxLength(64);

                    b.Property<int>("ClockNumber");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("EndTime");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalProgRef")
                        .HasMaxLength(64);

                    b.Property<int>("IndexThreshold");

                    b.Property<int>("IndexType");

                    b.Property<int>("LiveProgrammeIndicator");

                    b.Property<int>("ProductCode");

                    b.Property<string>("ProgrammeCategory")
                        .HasMaxLength(64);

                    b.Property<string>("ProgrammeClassification")
                        .HasMaxLength(64);

                    b.Property<int>("ProgrammeClassificationIndicator");

                    b.Property<int>("PublicHolidayIndicator");

                    b.Property<int>("RestrictionBasis");

                    b.Property<string>("RestrictionDays")
                        .HasMaxLength(7);

                    b.Property<int>("RestrictionType");

                    b.Property<int>("SchoolHolidayIndicator");

                    b.Property<DateTime>("StartDate");

                    b.Property<long?>("StartTime");

                    b.Property<int>("TimeToleranceMinsAfter");

                    b.Property<int>("TimeToleranceMinsBefore");

                    b.Property<Guid>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("ClashCode");

                    b.HasIndex("ClearanceCode");

                    b.HasIndex("ExternalProgRef");

                    b.HasIndex("ProgrammeCategory");

                    b.HasIndex("ProgrammeClassification");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Restrictions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Restrictions.RestrictionSalesArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RestrictionId");

                    b.Property<string>("SalesArea")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("RestrictionsSalesAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ResultsFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("FileContent")
                        .IsRequired();

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsCompressed");

                    b.Property<Guid>("ScenarioId");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId", "FileId")
                        .IsUnique();

                    b.ToTable("ResultFiles");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<int?>("ForceOverUnder");

                    b.Property<bool?>("Ignore");

                    b.Property<string>("InternalType")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("Over");

                    b.Property<string>("PeakValue")
                        .HasMaxLength(64);

                    b.Property<int>("RuleId");

                    b.Property<int>("RuleTypeId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("Under");

                    b.Property<string>("Value")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowedForAutopilot");

                    b.Property<bool>("IsCustom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RuleTypes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<DateTime>("CreatedOrExecuteDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("ISNULL(ExecuteStartedDateTime,CreatedDateTime)");

                    b.Property<int>("CustomId");

                    b.Property<string>("Description");

                    b.Property<int>("EfficiencyPeriod");

                    b.Property<DateTime>("EndDate");

                    b.Property<long>("EndTime");

                    b.Property<DateTime?>("ExecuteStartedDateTime");

                    b.Property<string>("FailureTypes");

                    b.Property<bool>("ISR");

                    b.Property<DateTime>("ISRDateEnd");

                    b.Property<DateTime>("ISRDateStart");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime>("LastModifiedDateTime");

                    b.Property<bool>("Manual");

                    b.Property<int?>("NumberOfWeeks");

                    b.Property<string>("Objectives");

                    b.Property<bool>("Optimisation");

                    b.Property<DateTime>("OptimisationDateEnd");

                    b.Property<DateTime>("OptimisationDateStart");

                    b.Property<bool>("Real");

                    b.Property<bool>("RightSizer");

                    b.Property<DateTime>("RightSizerDateEnd");

                    b.Property<DateTime>("RightSizerDateStart");

                    b.Property<int>("RunStatus");

                    b.Property<bool>("Smooth");

                    b.Property<DateTime>("SmoothDateEnd");

                    b.Property<DateTime>("SmoothDateStart");

                    b.Property<bool>("SpreadProgramming");

                    b.Property<DateTime>("StartDate");

                    b.Property<long>("StartTime");

                    b.Property<string>("TokenizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', Id, [Description])");

                    b.HasKey("Id");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("RunId");

                    b.HasKey("Id");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("RunAuthors");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunCampaignProcessesSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool?>("IncludeRightSizer");

                    b.Property<bool?>("InefficientSpotRemoval");

                    b.Property<int?>("RightSizerLevel");

                    b.Property<Guid>("RunId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("RunId");

                    b.ToTable("RunCampaignProcessesSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunCampaignReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("RunId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("RunId");

                    b.ToTable("RunCampaignReferences");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunInventoryLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ChosenScenarioId");

                    b.Property<bool>("Locked");

                    b.Property<Guid>("RunId");

                    b.HasKey("Id");

                    b.HasIndex("ChosenScenarioId");

                    b.HasIndex("RunId")
                        .IsUnique();

                    b.ToTable("RunInventoryLocks");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunSalesAreaPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Priority");

                    b.Property<Guid>("RunId");

                    b.Property<string>("SalesArea")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.HasIndex("SalesArea");

                    b.ToTable("RunSalesAreaPriorities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedDateTime");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Progress")
                        .HasMaxLength(32);

                    b.Property<Guid>("RunId");

                    b.Property<Guid>("ScenarioId");

                    b.Property<DateTime?>("StartedDateTime");

                    b.Property<short>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("RunId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("RunScenarios");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreaPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("LibrarySalesAreaPassPriorityUid");

                    b.Property<int>("Priority");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LibrarySalesAreaPassPriorityUid");

                    b.ToTable("SalesAreaPriorities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("BaseDemographic1")
                        .HasMaxLength(64);

                    b.Property<string>("BaseDemographic2")
                        .HasMaxLength(64);

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(64);

                    b.Property<int>("CustomId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DayDuration");

                    b.Property<string>("Name")
                        .HasMaxLength(512);

                    b.Property<string>("ShortName")
                        .HasMaxLength(256);

                    b.Property<long>("StartOffset");

                    b.Property<int>("UniverseId");

                    b.HasKey("Id");

                    b.HasIndex("BaseDemographic1");

                    b.HasIndex("BaseDemographic2");

                    b.HasIndex("CustomId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("ShortName")
                        .IsUnique()
                        .HasFilter("[ShortName] IS NOT NULL");

                    b.ToTable("SalesAreas");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesAreasChannelGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<Guid>("SalesAreaId");

                    b.HasKey("Id");

                    b.HasIndex("SalesAreaId");

                    b.ToTable("SalesAreasChannelGroups");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesAreasHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End");

                    b.Property<Guid>("SalesAreaId");

                    b.Property<DateTime>("Start");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SalesAreaId");

                    b.ToTable("SalesAreasHolidays");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ScenarioResults.ScenarioCampaignResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CampaignExternalId")
                        .HasMaxLength(64);

                    b.Property<double>("CampaignFinalRatings");

                    b.Property<double>("CampaignStartRatings");

                    b.Property<double>("CampaignTargetRatings");

                    b.Property<double>("DaypartFinalRatings");

                    b.Property<double>("DaypartStartRatings");

                    b.Property<double>("DaypartTargetRatings");

                    b.Property<string>("DowPattern")
                        .HasMaxLength(7);

                    b.Property<double>("SalesAreaGroupFinalRatings");

                    b.Property<double>("SalesAreaGroupStartRatings");

                    b.Property<double>("SalesAreaGroupTargetRatings");

                    b.Property<string>("SalesAreaName")
                        .HasMaxLength(512);

                    b.Property<Guid>("ScenarioId");

                    b.Property<int>("SpotLength");

                    b.Property<double>("SpotLengthFinalRatings");

                    b.Property<double>("SpotLengthStartRatings");

                    b.Property<double>("SpotLengthTargetRatings");

                    b.Property<long>("StrikeWeightEndDate");

                    b.Property<double>("StrikeWeightFinalRatings");

                    b.Property<long>("StrikeWeightStartDate");

                    b.Property<double>("StrikeWeightStartRatings");

                    b.Property<double>("StrikeWeightTargetRatings");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioCampaignResults");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ScenarioResults.ScenarioResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ScenarioId");

                    b.Property<DateTime>("TimeCompleted");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioResults");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ScenarioResults.ScenarioResultMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayFormat")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("ScenarioResultId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioResultId");

                    b.ToTable("ScenarioResultMetrics");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.Scenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("CustomId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<bool>("IsAutopilot");

                    b.Property<bool?>("IsLibraried");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("TokenizedName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT_WS(' ', Id, [Name])");

                    b.HasKey("Id");

                    b.HasIndex("IsLibraried");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCampaignPassPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ScenarioId");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioCampaignPassPriorities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCompactCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualRatings");

                    b.Property<string>("AdvertiserName")
                        .HasMaxLength(256);

                    b.Property<string>("AgencyName")
                        .HasMaxLength(256);

                    b.Property<string>("BusinessType")
                        .HasMaxLength(256);

                    b.Property<string>("CampaignGroup")
                        .HasMaxLength(256);

                    b.Property<string>("ClashCode")
                        .HasMaxLength(256);

                    b.Property<string>("ClashDescription")
                        .HasMaxLength(256);

                    b.Property<int>("CustomId");

                    b.Property<int>("DefaultCampaignPassPriority");

                    b.Property<string>("Demographic")
                        .HasMaxLength(256);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(256);

                    b.Property<bool>("IncludeOptimisation");

                    b.Property<int>("IncludeRightSizer");

                    b.Property<bool>("InefficientSpotRemoval");

                    b.Property<bool>("IsPercentage");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("ProductExternalRef")
                        .HasMaxLength(256);

                    b.Property<string>("ProductName")
                        .HasMaxLength(256);

                    b.Property<double>("RevenueBudget");

                    b.Property<int>("ScenarioCampaignPassPriorityId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<string>("Status")
                        .HasMaxLength(256);

                    b.Property<double>("TargetRatings");

                    b.Property<Guid>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioCampaignPassPriorityId")
                        .IsUnique();

                    b.ToTable("ScenarioCompactCampaigns");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioPassPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PassId");

                    b.Property<string>("PassName")
                        .HasMaxLength(256);

                    b.Property<int>("Priority");

                    b.Property<int>("ScenarioCampaignPassPriorityId");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioCampaignPassPriorityId");

                    b.ToTable("ScenarioPassPriorities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioPassReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("PassId");

                    b.Property<Guid>("ScenarioId");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("PassId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioPassReferences");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("SalesArea")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("SalesArea");

                    b.HasIndex("Date", "SalesArea")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleBreak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<long>("Avail");

                    b.Property<string>("BreakType")
                        .HasMaxLength(32);

                    b.Property<int>("CustomId");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<long>("Duration");

                    b.Property<string>("ExternalBreakRef")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalProgRef")
                        .HasMaxLength(64);

                    b.Property<bool>("Optimize");

                    b.Property<long>("OptimizerAvail");

                    b.Property<int>("PositionInProg");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<int>("ScheduleId");

                    b.Property<DateTime>("ScheduledDate");

                    b.HasKey("Id");

                    b.HasIndex("ExternalBreakRef");

                    b.HasIndex("ExternalProgRef");

                    b.HasIndex("SalesArea");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ScheduledDate");

                    b.ToTable("ScheduleBreaks");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleBreakEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Demographic")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<double>("Efficiency");

                    b.Property<Guid>("ScheduleBreakId");

                    b.HasKey("Id");

                    b.HasIndex("Demographic");

                    b.HasIndex("ScheduleBreakId");

                    b.HasIndex("ScheduleBreakId", "Demographic", "Efficiency");

                    b.ToTable("ScheduleBreakEfficiencies");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleProgramme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Classification")
                        .HasMaxLength(64);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<long>("Duration");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(64);

                    b.Property<bool>("LiveBroadcast");

                    b.Property<int>("PrgtNo");

                    b.Property<string>("ProgrammeName")
                        .HasMaxLength(128);

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<int>("ScheduleId");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("ExternalReference");

                    b.HasIndex("SalesArea");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleProgrammes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleProgrammeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("ScheduleProgrammeId");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleProgrammeId");

                    b.ToTable("ScheduleProgrammeCategories");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakDefaultFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BestBreakFactorGroupItemId");

                    b.Property<int>("Factor");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("BestBreakFactorGroupItemId");

                    b.ToTable("SmoothConfigurationBestBreakFactorGroupItemDefaultFactors");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BestBreakFactorGroupRecordId");

                    b.Property<byte>("Evaluation");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte>("SameBreakGroupScoreAction");

                    b.Property<int>("Sequence");

                    b.HasKey("Id");

                    b.HasIndex("BestBreakFactorGroupRecordId")
                        .IsUnique();

                    b.ToTable("SmoothConfigurationBestBreakFactorGroups");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllFilterFactorsMustBeNonZero");

                    b.Property<int>("BestBreakFactorGroupId");

                    b.Property<byte>("Evaluation");

                    b.Property<bool>("UseZeroScoresInEvaluation");

                    b.HasKey("Id");

                    b.HasIndex("BestBreakFactorGroupId");

                    b.ToTable("SmoothConfigurationBestBreakFactorGroupItems");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SmoothConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("SmoothConfigurationId");

                    b.ToTable("SmoothConfigurationBestBreakFactorGroupRecords");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecordPassSequenceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BestBreakFactorGroupRecordId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BestBreakFactorGroupRecordId");

                    b.ToTable("SmoothBestBreakFactorGroupRecordPassSequences");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFilterFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BestBreakFactorGroupItemId");

                    b.Property<int>("Factor");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("BestBreakFactorGroupItemId");

                    b.ToTable("SmoothConfigurationBestBreakFactorGroupItemFilterFactors");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.SameBreakGroupScoreFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BestBreakFactorGroupId");

                    b.Property<int>("Factor");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("BestBreakFactorGroupId")
                        .IsUnique();

                    b.ToTable("SmoothConfigurationSameBreakGroupScoreFactors");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ClashExceptionCheckEnabled");

                    b.Property<string>("ExternalCampaignRefsToExclude")
                        .IsRequired();

                    b.Property<bool>("RecommendationsForExcludedCampaigns");

                    b.Property<bool>("RestrictionCheckEnabled");

                    b.Property<bool>("SmoothFailuresForExcludedCampaigns");

                    b.Property<string>("Version")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SmoothConfigurations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothDiagnosticConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SmoothConfigurationId");

                    b.Property<string>("SpotDemographics")
                        .IsRequired();

                    b.Property<string>("SpotExternalCampaignRefs")
                        .IsRequired();

                    b.Property<string>("SpotExternalRefs")
                        .IsRequired();

                    b.Property<int?>("SpotMaxPreemptLevel");

                    b.Property<DateTime?>("SpotMaxStartTime");

                    b.Property<int?>("SpotMinPreemptLevel");

                    b.Property<DateTime?>("SpotMinStartTime");

                    b.Property<string>("SpotMultipartSpots")
                        .IsRequired();

                    b.Property<string>("SpotSalesAreas")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SmoothConfigurationId")
                        .IsUnique();

                    b.ToTable("SmoothDiagnosticConfigurations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Sequence");

                    b.Property<int>("SmoothConfigurationId");

                    b.Property<int>("SmoothPassType");

                    b.HasKey("Id");

                    b.HasIndex("SmoothConfigurationId");

                    b.ToTable("SmoothConfigurationSmoothPasses");

                    b.HasDiscriminator<int>("SmoothPassType");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassDefaultIteration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BreakPositionRules");

                    b.Property<byte>("ProductClashRules");

                    b.Property<byte>("RequestedPositionInBreakRules");

                    b.Property<bool>("RespectCampaignClash");

                    b.Property<bool>("RespectClashExceptions");

                    b.Property<bool>("RespectRestrictions");

                    b.Property<bool>("RespectSpotTime");

                    b.Property<int>("Sequence");

                    b.Property<int>("SmoothPassIterationRecordId");

                    b.HasKey("Id");

                    b.HasIndex("SmoothPassIterationRecordId")
                        .IsUnique();

                    b.ToTable("SmoothPassDefaultIterations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SmoothConfigurationId");

                    b.HasKey("Id");

                    b.HasIndex("SmoothConfigurationId");

                    b.ToTable("SmoothConfigurationSmoothPassIterationRecords");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecordPassSequenceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SmoothPassIterationRecordId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SmoothPassIterationRecordId");

                    b.ToTable("SmoothPassIterationRecordPassSequences");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassUnplacedIteration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ProductClashRule");

                    b.Property<bool>("RespectCampaignClash");

                    b.Property<bool>("RespectClashExceptions");

                    b.Property<bool>("RespectRestrictions");

                    b.Property<bool>("RespectSpotTime");

                    b.Property<int>("Sequence");

                    b.Property<int>("SmoothPassIterationRecordId");

                    b.HasKey("Id");

                    b.HasIndex("SmoothPassIterationRecordId")
                        .IsUnique();

                    b.ToTable("SmoothPassUnplacedIterations");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvertiserIdentifier");

                    b.Property<string>("AdvertiserName");

                    b.Property<DateTime>("BreakDateTime");

                    b.Property<string>("CampaignGroup");

                    b.Property<string>("CampaignName");

                    b.Property<string>("ClashCode");

                    b.Property<string>("ClashDescription");

                    b.Property<string>("ClearanceCode");

                    b.Property<string>("ExternalBreakRef");

                    b.Property<string>("ExternalCampaignRef");

                    b.Property<string>("ExternalSpotRef");

                    b.Property<string>("IndustryCode");

                    b.Property<string>("ProductName");

                    b.Property<string>("RestrictionDays")
                        .HasMaxLength(7);

                    b.Property<DateTime?>("RestrictionEndDate");

                    b.Property<long?>("RestrictionEndTime");

                    b.Property<DateTime?>("RestrictionStartDate");

                    b.Property<long?>("RestrictionStartTime");

                    b.Property<Guid>("RunId");

                    b.Property<string>("SalesArea");

                    b.Property<long>("SpotLength");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.ToTable("SmoothFailures");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailureMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SmoothFailureMessages");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailureMessageDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("LanguageAbbreviation")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("SmoothFailureMessageId");

                    b.HasKey("Id");

                    b.HasIndex("SmoothFailureMessageId");

                    b.ToTable("SmoothFailureMessageDescriptions");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailureSmoothFailureMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SmoothFailureId");

                    b.Property<int>("SmoothFailureMessageId");

                    b.HasKey("Id");

                    b.HasIndex("SmoothFailureId", "SmoothFailureMessageId")
                        .IsUnique();

                    b.ToTable("SmoothFailuresSmoothFailureMessages");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredDayPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(7);

                    b.Property<long>("EndTime");

                    b.Property<int>("SponsorshipItemId");

                    b.Property<long>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("SponsorshipItemId");

                    b.ToTable("SponsoredDayParts");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Applicability");

                    b.Property<int>("CalculationType");

                    b.Property<string>("Products");

                    b.Property<int?>("RestrictionType");

                    b.Property<int?>("RestrictionValue");

                    b.Property<int>("SponsorshipId");

                    b.HasKey("Id");

                    b.HasIndex("SponsorshipId");

                    b.ToTable("SponsoredItems");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.Sponsorship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("ExternalReferenceId")
                        .HasMaxLength(64);

                    b.Property<int>("RestrictionLevel");

                    b.Property<Guid>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("ExternalReferenceId");

                    b.ToTable("Sponsorships");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipAdvertiserExclusivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvertiserIdentifier")
                        .HasMaxLength(64);

                    b.Property<int?>("RestrictionType");

                    b.Property<int?>("RestrictionValue");

                    b.Property<int>("SponsoredItemId");

                    b.HasKey("Id");

                    b.HasIndex("SponsoredItemId");

                    b.ToTable("SponsorshipAdvertiserExclusivities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipClashExclusivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClashExternalRef")
                        .HasMaxLength(64);

                    b.Property<int?>("RestrictionType");

                    b.Property<int?>("RestrictionValue");

                    b.Property<int>("SponsoredItemId");

                    b.HasKey("Id");

                    b.HasIndex("ClashExternalRef");

                    b.HasIndex("SponsoredItemId");

                    b.ToTable("SponsorshipClashExclusivities");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ProgrammeName")
                        .HasMaxLength(128);

                    b.Property<string>("SalesAreas");

                    b.Property<int>("SponsoredItemId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("SponsoredItemId");

                    b.ToTable("SponsorshipItems");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Spot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualPositioninBreak")
                        .HasMaxLength(16);

                    b.Property<string>("BreakRequest")
                        .HasMaxLength(32);

                    b.Property<string>("BreakType")
                        .HasMaxLength(32);

                    b.Property<string>("ClearanceCode")
                        .HasMaxLength(64);

                    b.Property<bool>("ClientPicked");

                    b.Property<string>("Demographic")
                        .HasMaxLength(64);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<string>("ExternalBreakNo")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalCampaignNumber")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalSpotRef")
                        .HasMaxLength(64);

                    b.Property<string>("GroupCode")
                        .HasMaxLength(32);

                    b.Property<string>("IndustryCode")
                        .HasMaxLength(32);

                    b.Property<string>("MultipartSpot")
                        .HasMaxLength(16);

                    b.Property<string>("MultipartSpotPosition")
                        .HasMaxLength(16);

                    b.Property<string>("MultipartSpotRef");

                    b.Property<bool>("Preemptable");

                    b.Property<int>("Preemptlevel");

                    b.Property<string>("Product")
                        .HasMaxLength(64);

                    b.Property<string>("RequestedPositioninBreak")
                        .HasMaxLength(16);

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<bool>("Sponsored");

                    b.Property<long>("SpotLength");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("ExternalBreakNo");

                    b.HasIndex("ExternalCampaignNumber");

                    b.HasIndex("ExternalSpotRef");

                    b.HasIndex("MultipartSpot");

                    b.HasIndex("SalesArea");

                    b.HasIndex("StartDateTime");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("Spots");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SpotPlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExternalBreakRef")
                        .HasMaxLength(64);

                    b.Property<string>("ExternalSpotRef")
                        .HasMaxLength(64);

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("ResetExternalBreakRef")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("ExternalBreakRef");

                    b.HasIndex("ExternalSpotRef")
                        .IsUnique()
                        .HasFilter("[ExternalSpotRef] IS NOT NULL");

                    b.HasIndex("ModifiedTime");

                    b.ToTable("SpotPlacements");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<string>("IdValue")
                        .HasMaxLength(256);

                    b.Property<string>("Settings");

                    b.Property<Guid>("TenantSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("TenantSettingsId");

                    b.ToTable("TenantFeatureSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunEventSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventType")
                        .HasColumnName("EventType");

                    b.Property<Guid>("TenantSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("TenantSettingsId");

                    b.ToTable("TenantRunEventSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.TenantSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<bool>("Debug");

                    b.Property<Guid>("DefaultSalesAreaPassPriorityId");

                    b.Property<Guid>("DefaultScenarioId");

                    b.Property<long>("MidnightEndTime");

                    b.Property<long>("MidnightStartTime");

                    b.Property<int>("NoOfRatingsPerSalesDayDemo");

                    b.Property<long>("PeakEndTime");

                    b.Property<long>("PeakStartTime");

                    b.Property<int>("StartDayOfWeek");

                    b.HasKey("Id");

                    b.ToTable("TenantSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.WebhookSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventType");

                    b.Property<Guid>("TenantSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("TenantSettingsId");

                    b.ToTable("TenantWebhookSettings");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Universe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Demographic")
                        .HasMaxLength(64);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("SalesArea")
                        .HasMaxLength(64);

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("UniverseValue");

                    b.HasKey("Id");

                    b.HasIndex("Demographic");

                    b.HasIndex("EndDate");

                    b.HasIndex("SalesArea");

                    b.HasIndex("StartDate");

                    b.ToTable("Universes");
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRule", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleBase");

                    b.Property<bool>("Ignore")
                        .HasColumnName("Ignore");

                    b.Property<string>("PeakValue")
                        .HasColumnName("PeakValue")
                        .HasMaxLength(64);

                    b.HasIndex("PassId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleGeneral", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleBase");

                    b.HasIndex("PassId")
                        .HasName("IX_PassRules_PassId1");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleTolerance", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleBase");

                    b.Property<int>("ForceOverUnder")
                        .HasColumnName("ForceOverUnder");

                    b.Property<bool>("Ignore")
                        .HasColumnName("Ignore");

                    b.Property<int>("Over")
                        .HasColumnName("Over");

                    b.Property<int>("Under")
                        .HasColumnName("Under");

                    b.HasIndex("PassId")
                        .HasName("IX_PassRules_PassId2");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleWeighting", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleBase");

                    b.HasIndex("PassId")
                        .HasName("IX_PassRules_PassId3");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassBooked", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPass");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassDefault", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPass");

                    b.Property<string>("BreakRequests");

                    b.Property<bool>("CanSplitMultipartSpots");

                    b.Property<bool?>("HasMultipartSpots");

                    b.Property<bool?>("HasProductClashCode");

                    b.Property<bool?>("HasSpotEndTime");

                    b.Property<bool?>("Preemptable");

                    b.Property<bool?>("Sponsored");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassUnplaced", b =>
                {
                    b.HasBaseType("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPass");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookInstanceConfigurationCriteria", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookInstanceConfiguration")
                        .WithMany("CriteriaList")
                        .HasForeignKey("AutoBookInstanceConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookTask", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBook")
                        .WithOne("Task")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.AutoBookTask", "AutoBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgAval", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AutoBookDefaultParameters")
                        .WithMany("AgBreak_AgAvals")
                        .HasForeignKey("AutoBookDefaultParametersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignProgramme", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AutoBookDefaultParameters")
                        .WithMany("AgCampaign_AgProgrammeList")
                        .HasForeignKey("AutoBookDefaultParametersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignProgrammeProgrammeCategory", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignProgramme")
                        .WithMany("CategoryOrProgramme")
                        .HasForeignKey("AgCampaignProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AutoBookDefaultParameters")
                        .WithMany("AgCampaign_AgCampaignSalesAreas")
                        .HasForeignKey("AutoBookDefaultParametersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgDayPart", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea")
                        .WithMany("AgDayParts")
                        .HasForeignKey("AgCampaignSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgDayPartLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgDayPart")
                        .WithMany("AgDayPartLengths")
                        .HasForeignKey("AgDayPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea")
                        .WithMany("AgLengths")
                        .HasForeignKey("AgCampaignSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgMultiPart", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgLength")
                        .WithMany("AgMultiParts")
                        .HasForeignKey("AgLengthId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgPart", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea")
                        .WithMany("AgParts")
                        .HasForeignKey("AgCampaignSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgPartLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea")
                        .WithMany("AgPartsLengths")
                        .HasForeignKey("AgCampaignSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgPrediction", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AutoBookDefaultParameters")
                        .WithMany("AgBreak_AgPredictions")
                        .HasForeignKey("AutoBookDefaultParametersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgRegionalBreak", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AutoBookDefaultParameters")
                        .WithMany("AgBreak_AgRegionalBreaks")
                        .HasForeignKey("AutoBookDefaultParametersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgStrikeWeight", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignSalesArea")
                        .WithMany("AgStrikeWeights")
                        .HasForeignKey("AgCampaignSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgStrikeWeightLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgStrikeWeight")
                        .WithMany("AgStrikeWeightLengths")
                        .HasForeignKey("AgStrikeWeightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgTimeBand", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgCampaignProgramme")
                        .WithMany("TimeBands")
                        .HasForeignKey("AgCampaignProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgTimeSlice", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.AutoBookApi.DefaultParameters.AgDayPart")
                        .WithMany("AgTimeSlices")
                        .HasForeignKey("AgDayPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Breaks.BreakEfficiency", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Breaks.Break")
                        .WithMany("BreakEfficiencies")
                        .HasForeignKey("BreakId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignBreakType", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.Campaign")
                        .WithMany("BreakTypes")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestriction", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.Campaign")
                        .WithMany("ProgrammeRestrictions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestrictionCategoryOrProgramme", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestriction")
                        .WithMany("CategoryOrProgramme")
                        .HasForeignKey("CampaignProgrammeRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestrictionSalesArea", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignProgrammeRestriction")
                        .WithMany("SalesAreas")
                        .HasForeignKey("CampaignProgrammeRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTarget", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.Campaign")
                        .WithMany("SalesAreaCampaignTargets")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetGroup", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTarget")
                        .WithOne("SalesAreaGroup")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetGroup", "CampaignSalesAreaTargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetGroupSalesArea", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetGroup")
                        .WithMany("SalesAreas")
                        .HasForeignKey("CampaignSalesAreaTargetGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetMultipart", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTarget")
                        .WithMany("Multiparts")
                        .HasForeignKey("CampaignSalesAreaTargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetMultipartLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTargetMultipart")
                        .WithMany("Lengths")
                        .HasForeignKey("CampaignSalesAreaTargetMultipartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTarget", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignSalesAreaTarget")
                        .WithMany("CampaignTargets")
                        .HasForeignKey("CampaignSalesAreaTargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeight", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTarget")
                        .WithMany("StrikeWeights")
                        .HasForeignKey("CampaignTargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPart", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeight")
                        .WithMany("DayParts")
                        .HasForeignKey("CampaignTargetStrikeWeightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPartLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPart")
                        .WithMany("Lengths")
                        .HasForeignKey("CampaignTargetStrikeWeightDayPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPartTimeSlice", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightDayPart")
                        .WithMany("Timeslices")
                        .HasForeignKey("CampaignTargetStrikeWeightDayPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeightLength", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTargetStrikeWeight")
                        .WithMany("Lengths")
                        .HasForeignKey("CampaignTargetStrikeWeightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTimeRestriction", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.Campaign")
                        .WithMany("TimeRestrictions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTimeRestrictionSalesArea", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Campaigns.CampaignTimeRestriction")
                        .WithMany("SalesAreas")
                        .HasForeignKey("CampaignTimeRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashDifference", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Clash")
                        .WithMany("Differences")
                        .HasForeignKey("ClashId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashDifferenceTimeAndDow", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashDifference")
                        .WithOne("TimeAndDow")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashDifferenceTimeAndDow", "ClashDifferenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashExceptions.ClashExceptionsTimeAndDow", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ClashExceptions.ClashException")
                        .WithMany("ClashExceptionsTimeAndDows")
                        .HasForeignKey("ClashExceptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailAuditEventSettings", b =>
                {
                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailNotificationSettings", "NotificationSettings", b1 =>
                        {
                            b1.Property<int>("EmailAuditEventSettingsId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("CCAddresses");

                            b1.Property<bool>("Enabled");

                            b1.Property<string>("RecipientAddresses");

                            b1.Property<string>("SenderAddress")
                                .HasMaxLength(256);

                            b1.HasKey("EmailAuditEventSettingsId");

                            b1.ToTable("EmailAuditEventSettings");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailAuditEventSettings")
                                .WithOne("NotificationSettings")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailNotificationSettings", "EmailAuditEventSettingsId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FaultTypeDescription", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FaultType")
                        .WithMany("Descriptions")
                        .HasForeignKey("FaultTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalAreaDescription", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalArea")
                        .WithMany("Descriptions")
                        .HasForeignKey("FunctionalAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalAreaFaultType", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FaultType", "FaultType")
                        .WithOne("FunctionalAreaFaultType")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalAreaFaultType", "FaultTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.FunctionalAreas.FunctionalArea")
                        .WithMany("FunctionalAreaFaultTypes")
                        .HasForeignKey("FunctionalAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ISRSettings.ISRDemographicSettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ISRSettings.ISRSettings")
                        .WithMany("DemographicsSettings")
                        .HasForeignKey("ISRSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.MSTeamsAuditEventSettings.MSTeamsAuditEventSettings", b =>
                {
                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.MSTeamsAuditEventSettings.MSTeamsPostMessageSettings", "PostMessageSettings", b1 =>
                        {
                            b1.Property<int>("MSTeamsAuditEventSettingsId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Enabled");

                            b1.Property<string>("Url")
                                .HasMaxLength(256);

                            b1.HasKey("MSTeamsAuditEventSettingsId");

                            b1.ToTable("MSTeamsAuditEventSettings");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.MSTeamsAuditEventSettings.MSTeamsAuditEventSettings")
                                .WithOne("PostMessageSettings")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.MSTeamsAuditEventSettings.MSTeamsPostMessageSettings", "MSTeamsAuditEventSettingsId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Metadatas.MetadataValue", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Metadatas.MetadataCategory")
                        .WithMany("MetadataValues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.OutputFiles.OutputFileColumn", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.OutputFiles.OutputFile")
                        .WithMany("Columns")
                        .HasForeignKey("OutputFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassBreakExclusion", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("BreakExclusions")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassProgrammeRepetition", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("ProgrammeRepetitions")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSalesAreaPriority", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSalesAreaPriorityCollection")
                        .WithMany("SalesAreaPriorities")
                        .HasForeignKey("PassSalesAreaPriorityCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSalesAreaPriorityCollection", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithOne("PassSalesAreaPriorities")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSalesAreaPriorityCollection", "PassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassSlottingLimit", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("SlottingLimits")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.PredictionSchedules.PredictionScheduleRating", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.PredictionSchedules.PredictionSchedule", "PredictionSchedule")
                        .WithMany("Ratings")
                        .HasForeignKey("PredictionScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Programmes.ProgrammeCategory", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Programmes.Programme")
                        .WithMany("ProgrammeCategories")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSDemographicSettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettings")
                        .WithMany("DemographicsSettings")
                        .HasForeignKey("RSSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettingsDefaultDeliverySettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettings")
                        .WithMany("DefaultDeliverySettingsList")
                        .HasForeignKey("RSSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSSettingsDemographicsDeliverySettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.RSSettings.RSDemographicSettings")
                        .WithMany("DeliverySettingsList")
                        .HasForeignKey("RSSettingsDemographicsSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Restrictions.RestrictionSalesArea", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Restrictions.Restriction")
                        .WithMany("SalesAreas")
                        .HasForeignKey("RestrictionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunAuthor", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run")
                        .WithOne("Author")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunAuthor", "RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunCampaignProcessesSettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run")
                        .WithMany("CampaignsProcessesSettings")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunCampaignReference", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run")
                        .WithMany("Campaigns")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunInventoryLock", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run")
                        .WithOne("InventoryLock")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunInventoryLock", "RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunSalesAreaPriority", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run")
                        .WithMany("SalesAreaPriorities")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.RunScenario", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Runs.Run")
                        .WithMany("Scenarios")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreaPriority", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.LibrarySalesAreaPassPriority")
                        .WithMany("SalesAreaPriorities")
                        .HasForeignKey("LibrarySalesAreaPassPriorityUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesAreasChannelGroup", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesArea")
                        .WithMany("ChannelGroups")
                        .HasForeignKey("SalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesAreasHoliday", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.SalesAreas.SalesArea")
                        .WithMany("Holidays")
                        .HasForeignKey("SalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ScenarioResults.ScenarioResultMetric", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.ScenarioResults.ScenarioResult")
                        .WithMany("Metrics")
                        .HasForeignKey("ScenarioResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCampaignPassPriority", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.Scenario")
                        .WithMany("CampaignPassPriorities")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCompactCampaign", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCampaignPassPriority")
                        .WithOne("Campaign")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCompactCampaign", "ScenarioCampaignPassPriorityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioPassPriority", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioCampaignPassPriority")
                        .WithMany("PassPriorities")
                        .HasForeignKey("ScenarioCampaignPassPriorityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.ScenarioPassReference", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass", "Pass")
                        .WithMany()
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Scenarios.Scenario")
                        .WithMany("PassReferences")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleBreak", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.Schedule")
                        .WithMany("Breaks")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleBreakEfficiency", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleBreak")
                        .WithMany("BreakEfficiencies")
                        .HasForeignKey("ScheduleBreakId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleProgramme", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.Schedule")
                        .WithMany("Programmes")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleProgrammeCategory", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Schedules.ScheduleProgramme")
                        .WithMany("ProgrammeCategories")
                        .HasForeignKey("ScheduleProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakDefaultFactor", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupItem")
                        .WithMany("DefaultFactors")
                        .HasForeignKey("BestBreakFactorGroupItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroup", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecord")
                        .WithOne("BestBreakFactorGroup")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroup", "BestBreakFactorGroupRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupItem", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroup")
                        .WithMany("Items")
                        .HasForeignKey("BestBreakFactorGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecord", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothConfiguration")
                        .WithMany("BestBreakFactorGroupRecords")
                        .HasForeignKey("SmoothConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupSpotsCriteria", "SpotsCriteria", b1 =>
                        {
                            b1.Property<int>("BestBreakFactorGroupRecordId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool?>("HasBreakRequest")
                                .HasColumnName("SpotsCriteriaHasBreakRequest");

                            b1.Property<bool?>("HasFIBORLIBRequests")
                                .HasColumnName("SpotsCriteriaHasFIBORLIBRequests");

                            b1.Property<bool?>("HasSponsoredSpots")
                                .HasColumnName("SpotsCriteriaHasSponsoredSpots");

                            b1.HasKey("BestBreakFactorGroupRecordId");

                            b1.ToTable("SmoothConfigurationBestBreakFactorGroupRecords");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecord")
                                .WithOne("SpotsCriteria")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupSpotsCriteria", "BestBreakFactorGroupRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecordPassSequenceItem", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupRecord")
                        .WithMany("PassSequences")
                        .HasForeignKey("BestBreakFactorGroupRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFilterFactor", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroupItem")
                        .WithMany("FilterFactors")
                        .HasForeignKey("BestBreakFactorGroupItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.SameBreakGroupScoreFactor", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.BestBreakFactorGroup")
                        .WithOne("SameBreakGroupScoreFactor")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.BestBreakFactorEntities.SameBreakGroupScoreFactor", "BestBreakFactorGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothDiagnosticConfiguration", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothConfiguration")
                        .WithOne("DiagnosticConfiguration")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothDiagnosticConfiguration", "SmoothConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPass", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothConfiguration")
                        .WithMany("Passes")
                        .HasForeignKey("SmoothConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassDefaultIteration", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecord")
                        .WithOne("PassDefaultIteration")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassDefaultIteration", "SmoothPassIterationRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecord", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothConfiguration")
                        .WithMany("IterationRecords")
                        .HasForeignKey("SmoothConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationSpotsCriteria", "SpotsCriteria", b1 =>
                        {
                            b1.Property<int>("SmoothPassIterationRecordId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool?>("HasBreakRequest")
                                .HasColumnName("SpotsCriteriaHasBreakRequest");

                            b1.Property<bool?>("HasFIBORLIBRequests")
                                .HasColumnName("SpotsCriteriaHasFIBORLIBRequests");

                            b1.Property<bool?>("HasSponsoredSpots")
                                .HasColumnName("SpotsCriteriaHasSponsoredSpots");

                            b1.HasKey("SmoothPassIterationRecordId");

                            b1.ToTable("SmoothConfigurationSmoothPassIterationRecords");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecord")
                                .WithOne("SpotsCriteria")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationSpotsCriteria", "SmoothPassIterationRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecordPassSequenceItem", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecord")
                        .WithMany("PassSequences")
                        .HasForeignKey("SmoothPassIterationRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassUnplacedIteration", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassIterationRecord")
                        .WithOne("PassUnplacedIteration")
                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.Configuration.SmoothPassEntities.SmoothPassUnplacedIteration", "SmoothPassIterationRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailureMessageDescription", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailureMessage")
                        .WithMany("Descriptions")
                        .HasForeignKey("SmoothFailureMessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailureSmoothFailureMessage", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Smooth.SmoothFailure")
                        .WithMany("FailureMessagesMap")
                        .HasForeignKey("SmoothFailureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredDayPart", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipItem")
                        .WithMany("DayParts")
                        .HasForeignKey("SponsorshipItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredItem", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.Sponsorship")
                        .WithMany("SponsoredItems")
                        .HasForeignKey("SponsorshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipAdvertiserExclusivity", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredItem")
                        .WithMany("AdvertiserExclusivities")
                        .HasForeignKey("SponsoredItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipClashExclusivity", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredItem")
                        .WithMany("ClashExclusivities")
                        .HasForeignKey("SponsoredItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsorshipItem", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Sponsorships.SponsoredItem")
                        .WithMany("SponsorshipItems")
                        .HasForeignKey("SponsoredItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.Feature", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.TenantSettings")
                        .WithMany("Features")
                        .HasForeignKey("TenantSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunEventSettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.TenantSettings")
                        .WithMany("RunEventSettings")
                        .HasForeignKey("TenantSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailNotificationSettings", "Email", b1 =>
                        {
                            b1.Property<int>("RunEventSettingsId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("CCAddresses")
                                .HasColumnName("EmailNotificationCCAddresses");

                            b1.Property<bool>("Enabled")
                                .HasColumnName("EmailNotificationEnabled");

                            b1.Property<string>("RecipientAddresses")
                                .HasColumnName("EmailNotificationRecipientAddresses");

                            b1.Property<string>("SenderAddress")
                                .HasColumnName("EmailNotificationSenderAddress")
                                .HasMaxLength(256);

                            b1.HasKey("RunEventSettingsId");

                            b1.ToTable("TenantRunEventSettings");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunEventSettings")
                                .WithOne("Email")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.EmailNotificationSettings", "RunEventSettingsId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPNotificationSettings", "HTTP", b1 =>
                        {
                            b1.Property<int>("RunEventSettingsId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Enabled")
                                .HasColumnName("HTTPNotificationEnabled");

                            b1.Property<string>("SucccessStatusCodes")
                                .HasColumnName("HTTPNotificationSucccessStatusCodes");

                            b1.HasKey("RunEventSettingsId");

                            b1.ToTable("TenantRunEventSettings");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunEventSettings")
                                .WithOne("HTTP")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPNotificationSettings", "RunEventSettingsId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPMethodSettings", "MethodSettings", b2 =>
                                {
                                    b2.Property<int>("HTTPNotificationSettingsRunEventSettingsId")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ContentTemplate")
                                        .HasColumnName("HTTPNotificationContentTemplate");

                                    b2.Property<string>("Headers")
                                        .HasColumnName("HTTPNotificationHeaders");

                                    b2.Property<string>("Method")
                                        .HasColumnName("HTTPNotificationMethod")
                                        .HasMaxLength(16);

                                    b2.Property<string>("URL")
                                        .HasColumnName("HTTPNotificationURL");

                                    b2.HasKey("HTTPNotificationSettingsRunEventSettingsId");

                                    b2.ToTable("TenantRunEventSettings");

                                    b2.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPNotificationSettings")
                                        .WithOne("MethodSettings")
                                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPMethodSettings", "HTTPNotificationSettingsRunEventSettingsId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.TenantSettings", b =>
                {
                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunRestrictions", "RunRestrictions", b1 =>
                        {
                            b1.Property<Guid>("TenantSettingsId")
                                .ValueGeneratedOnAdd();

                            b1.HasKey("TenantSettingsId");

                            b1.ToTable("TenantSettings");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.TenantSettings")
                                .WithOne("RunRestrictions")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunRestrictions", "TenantSettingsId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.MinimumDocumentRestriction", "MinDocRestriction", b2 =>
                                {
                                    b2.Property<Guid>("RunRestrictionsTenantSettingsId")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<int>("Campaigns")
                                        .HasColumnName("MinimumDocumentRestrictionCampaigns");

                                    b2.Property<int>("Clashes")
                                        .HasColumnName("MinimumDocumentRestrictionClashes");

                                    b2.Property<int>("ClearanceCodes")
                                        .HasColumnName("MinimumDocumentRestrictionClearanceCodes");

                                    b2.Property<int>("Demographics")
                                        .HasColumnName("MinimumDocumentRestrictionDemographics");

                                    b2.Property<int>("Products")
                                        .HasColumnName("MinimumDocumentRestrictionProducts");

                                    b2.HasKey("RunRestrictionsTenantSettingsId");

                                    b2.ToTable("TenantSettings");

                                    b2.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunRestrictions")
                                        .WithOne("MinDocRestriction")
                                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.MinimumDocumentRestriction", "RunRestrictionsTenantSettingsId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.MinimumRunSizeDocumentRestriction", "MinRunSizeDocRestriction", b2 =>
                                {
                                    b2.Property<Guid>("RunRestrictionsTenantSettingsId")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<int>("Breaks")
                                        .HasColumnName("MinimumRunSizeDocumentRestrictionBreaks");

                                    b2.Property<int>("Programmes")
                                        .HasColumnName("MinimumRunSizeDocumentRestrictionProgrammes");

                                    b2.Property<int>("Spots")
                                        .HasColumnName("MinimumRunSizeDocumentRestrictionSpots");

                                    b2.HasKey("RunRestrictionsTenantSettingsId");

                                    b2.ToTable("TenantSettings");

                                    b2.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.RunRestrictions")
                                        .WithOne("MinRunSizeDocRestriction")
                                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.MinimumRunSizeDocumentRestriction", "RunRestrictionsTenantSettingsId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.WebhookSettings", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.TenantSettings")
                        .WithMany("WebhookSettings")
                        .HasForeignKey("TenantSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPNotificationSettings", "HTTP", b1 =>
                        {
                            b1.Property<int>("WebhookSettingsId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("Enabled")
                                .HasColumnName("HTTPNotificationEnabled");

                            b1.Property<string>("SucccessStatusCodes")
                                .HasColumnName("HTTPNotificationSucccessStatusCodes");

                            b1.HasKey("WebhookSettingsId");

                            b1.ToTable("TenantWebhookSettings");

                            b1.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.WebhookSettings")
                                .WithOne("HTTP")
                                .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPNotificationSettings", "WebhookSettingsId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPMethodSettings", "MethodSettings", b2 =>
                                {
                                    b2.Property<int>("HTTPNotificationSettingsWebhookSettingsId")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("ContentTemplate")
                                        .HasColumnName("HTTPNotificationContentTemplate");

                                    b2.Property<string>("Headers")
                                        .HasColumnName("HTTPNotificationHeaders");

                                    b2.Property<string>("Method")
                                        .HasColumnName("HTTPNotificationMethod")
                                        .HasMaxLength(16);

                                    b2.Property<string>("URL")
                                        .HasColumnName("HTTPNotificationURL");

                                    b2.HasKey("HTTPNotificationSettingsWebhookSettingsId");

                                    b2.ToTable("TenantWebhookSettings");

                                    b2.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPNotificationSettings")
                                        .WithOne("MethodSettings")
                                        .HasForeignKey("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.TenantSettings.HTTPMethodSettings", "HTTPNotificationSettingsWebhookSettingsId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRule", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("Rules")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleGeneral", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("General")
                        .HasForeignKey("PassId")
                        .HasConstraintName("FK_PassRules_Passes_PassId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleTolerance", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("Tolerances")
                        .HasForeignKey("PassId")
                        .HasConstraintName("FK_PassRules_Passes_PassId2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.PassRuleWeighting", b =>
                {
                    b.HasOne("ImagineCommunications.GamePlan.Persistence.SqlServer.Entities.Tenant.Passes.Pass")
                        .WithMany("Weightings")
                        .HasForeignKey("PassId")
                        .HasConstraintName("FK_PassRules_Passes_PassId3")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
