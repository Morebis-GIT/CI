// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ImagineCommunications.GamePlan.Core.Tests.GherkinTests.BusinessRuleTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "ClashExposureCount")]
    public partial class CalculatePeakOffPeakClashExceptionCountFeature : Xunit.IClassFixture<CalculatePeakOffPeakClashExceptionCountFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CalculatePeakOffPeakClashExposureCount.feature"
#line hidden
        
        public CalculatePeakOffPeakClashExceptionCountFeature(CalculatePeakOffPeakClashExceptionCountFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculate peak/off peak clash exception count", @"	In order to manage spot placement during peak or off-peak times
	As an Airtime manager
	I want to specify rules for clash exception counts based on break sales area
	And/or time period
	And/or day of the week
	And calculate the resulting clash exposure count to use", ProgrammingLanguage.CSharp, new string[] {
                        "ClashExposureCount"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 10
#line 11
 testRunner.Given("a new break", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("the break is in sales area \'NWS91\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("the break is 3 minutes long", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("a new clash", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("the clash has default off peak exposure count of 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("the clash has default peak exposure count of 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("no peak time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="No differences are defined for the clash exposure counts and no peak time is defi" +
            "ned")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "No differences are defined for the clash exposure counts and no peak time is defi" +
            "ned")]
        public virtual void NoDifferencesAreDefinedForTheClashExposureCountsAndNoPeakTimeIsDefined()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No differences are defined for the clash exposure counts and no peak time is defi" +
                    "ned", null, ((string[])(null)));
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line 20
 testRunner.Given("a clash with no exposure count differences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="No differences are defined for the clash exposure counts and the break is in offp" +
            "eak time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "No differences are defined for the clash exposure counts and the break is in offp" +
            "eak time")]
        public virtual void NoDifferencesAreDefinedForTheClashExposureCountsAndTheBreakIsInOffpeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No differences are defined for the clash exposure counts and the break is in offp" +
                    "eak time", null, ((string[])(null)));
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line 25
 testRunner.Given("a clash with no exposure count differences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="No differences are defined for the clash exposure counts and the break is in peak" +
            " time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "No differences are defined for the clash exposure counts and the break is in peak" +
            " time")]
        public virtual void NoDifferencesAreDefinedForTheClashExposureCountsAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No differences are defined for the clash exposure counts and the break is in peak" +
                    " time", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line 32
 testRunner.Given("a clash with no exposure count differences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("the break starts at \'25 Dec 2019 12:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference not matching the break\'s sales area is defined and the break is in o" +
            "ffpeak time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference not matching the break\'s sales area is defined and the break is in o" +
            "ffpeak time")]
        public virtual void ADifferenceNotMatchingTheBreaksSalesAreaIsDefinedAndTheBreakIsInOffpeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference not matching the break\'s sales area is defined and the break is in o" +
                    "ffpeak time", null, ((string[])(null)));
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table1.AddRow(new string[] {
                        "QTQ93",
                        "",
                        "",
                        "",
                        "2",
                        "3"});
#line 39
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table1, "Given ");
#line 42
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference not matching the break\'s sales area is defined and the break is in p" +
            "eak time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference not matching the break\'s sales area is defined and the break is in p" +
            "eak time")]
        public virtual void ADifferenceNotMatchingTheBreaksSalesAreaIsDefinedAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference not matching the break\'s sales area is defined and the break is in p" +
                    "eak time", null, ((string[])(null)));
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table2.AddRow(new string[] {
                        "QTQ93",
                        "",
                        "",
                        "",
                        "2",
                        "3"});
#line 48
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table2, "Given ");
#line 51
 testRunner.And("the break starts at \'25 Dec 2019 12:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference matching the break\'s sales area is defined and the break is in offpe" +
            "ak time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference matching the break\'s sales area is defined and the break is in offpe" +
            "ak time")]
        public virtual void ADifferenceMatchingTheBreaksSalesAreaIsDefinedAndTheBreakIsInOffpeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference matching the break\'s sales area is defined and the break is in offpe" +
                    "ak time", null, ((string[])(null)));
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table3.AddRow(new string[] {
                        "NWS91",
                        "",
                        "",
                        "",
                        "2",
                        "3"});
#line 57
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table3, "Given ");
#line 60
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference matching the break\'s sales area is defined and the break is in peak " +
            "time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference matching the break\'s sales area is defined and the break is in peak " +
            "time")]
        public virtual void ADifferenceMatchingTheBreaksSalesAreaIsDefinedAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference matching the break\'s sales area is defined and the break is in peak " +
                    "time", null, ((string[])(null)));
#line 63
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table4.AddRow(new string[] {
                        "NWS91",
                        "",
                        "",
                        "",
                        "2",
                        "3"});
#line 64
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table4, "Given ");
#line 67
 testRunner.And("the break starts at \'25 Dec 2019 12:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("the clash exposure count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas is before the break and the break is in offpeak " +
            "time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas is before the break and the break is in offpeak " +
            "time")]
        public virtual void ADifferenceForAllSalesAreasIsBeforeTheBreakAndTheBreakIsInOffpeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas is before the break and the break is in offpeak " +
                    "time", null, ((string[])(null)));
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table5.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=08:00:00, endTime=08:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 73
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table5, "Given ");
#line 76
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is just before the start of a three day cla" +
            "sh period")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is just before the start of a three day cla" +
            "sh period")]
        public virtual void ADifferenceForSpecificSalesAreasIsJustBeforeTheStartOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is just before the start of a three day cla" +
                    "sh period", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table6.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 82
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table6, "Given ");
#line 85
 testRunner.And("the break starts at \'9 May 2020 05:59:59\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("the clash exposure count is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is at the start of a three day clash period" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is at the start of a three day clash period" +
            "")]
        public virtual void ADifferenceForSpecificSalesAreasIsAtTheStartOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is at the start of a three day clash period" +
                    "", null, ((string[])(null)));
#line 90
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table7.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 91
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table7, "Given ");
#line 94
 testRunner.And("the break starts at \'9 May 2020 06:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is in the middle of a three day clash perio" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is in the middle of a three day clash perio" +
            "d")]
        public virtual void ADifferenceForSpecificSalesAreasIsInTheMiddleOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is in the middle of a three day clash perio" +
                    "d", null, ((string[])(null)));
#line 99
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table8.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 100
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table8, "Given ");
#line 103
 testRunner.And("the break starts at \'10 May 2020 00:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is in the start of the middle of a three da" +
            "y clash period")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is in the start of the middle of a three da" +
            "y clash period")]
        public virtual void ADifferenceForSpecificSalesAreasIsInTheStartOfTheMiddleOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is in the start of the middle of a three da" +
                    "y clash period", null, ((string[])(null)));
#line 108
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table9.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 109
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table9, "Given ");
#line 112
 testRunner.And("the break starts at \'10 May 2020 06:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is at the end of a three day clash period")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is at the end of a three day clash period")]
        public virtual void ADifferenceForSpecificSalesAreasIsAtTheEndOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is at the end of a three day clash period", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table10.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 118
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table10, "Given ");
#line 121
 testRunner.And("the break starts at \'11 May 2020 00:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is just before the end of a three day clash" +
            " period")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is just before the end of a three day clash" +
            " period")]
        public virtual void ADifferenceForSpecificSalesAreasIsJustBeforeTheEndOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is just before the end of a three day clash" +
                    " period", null, ((string[])(null)));
#line 126
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table11.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 127
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table11, "Given ");
#line 130
 testRunner.And("the break starts at \'11 May 2020 05:59:59\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is just after the end of a three day clash " +
            "period")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is just after the end of a three day clash " +
            "period")]
        public virtual void ADifferenceForSpecificSalesAreasIsJustAfterTheEndOfAThreeDayClashPeriod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is just after the end of a three day clash " +
                    "period", null, ((string[])(null)));
#line 135
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table12.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 136
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table12, "Given ");
#line 139
 testRunner.And("the break starts at \'12 May 2020 06:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 142
 testRunner.Then("the clash exposure count is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is at the start of a three day clash period" +
            " with no end time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is at the start of a three day clash period" +
            " with no end time")]
        public virtual void ADifferenceForSpecificSalesAreasIsAtTheStartOfAThreeDayClashPeriodWithNoEndTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is at the start of a three day clash period" +
                    " with no end time", null, ((string[])(null)));
#line 144
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table13.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "startTime=06:00:00, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 145
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table13, "Given ");
#line 148
 testRunner.And("the break starts at \'12 May 2020 05:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
 testRunner.Then("the clash exposure count is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is at the start of a three day clash period" +
            " with no start time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is at the start of a three day clash period" +
            " with no start time")]
        public virtual void ADifferenceForSpecificSalesAreasIsAtTheStartOfAThreeDayClashPeriodWithNoStartTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is at the start of a three day clash period" +
                    " with no start time", null, ((string[])(null)));
#line 153
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table14.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "11 May 2020",
                        "endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 154
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table14, "Given ");
#line 157
 testRunner.And("the break starts at \'9 May 2020 4:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 160
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is at the start of a three day clash period" +
            " with no end date")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is at the start of a three day clash period" +
            " with no end date")]
        public virtual void ADifferenceForSpecificSalesAreasIsAtTheStartOfAThreeDayClashPeriodWithNoEndDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is at the start of a three day clash period" +
                    " with no end date", null, ((string[])(null)));
#line 162
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "Start Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table15.AddRow(new string[] {
                        "NWS91",
                        "09 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 163
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table15, "Given ");
#line 166
 testRunner.And("the break starts at \'15 May 2020 06:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 169
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for specific sales areas is at the start of a three day clash period" +
            " with no start date")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for specific sales areas is at the start of a three day clash period" +
            " with no start date")]
        public virtual void ADifferenceForSpecificSalesAreasIsAtTheStartOfAThreeDayClashPeriodWithNoStartDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for specific sales areas is at the start of a three day clash period" +
                    " with no start date", null, ((string[])(null)));
#line 171
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sales Area",
                        "End Date",
                        "Time And Dow",
                        "Peak Exposure Count",
                        "Off Peak Exposure Count"});
            table16.AddRow(new string[] {
                        "NWS91",
                        "11 May 2020",
                        "startTime=06:00:00, endTime=05:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 172
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table16, "Given ");
#line 175
 testRunner.And("the break starts at \'01 May 2020 06:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.And("a peak time running from \'180000\' to \'220000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas is before the break and the break is in peak tim" +
            "e")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas is before the break and the break is in peak tim" +
            "e")]
        public virtual void ADifferenceForAllSalesAreasIsBeforeTheBreakAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas is before the break and the break is in peak tim" +
                    "e", null, ((string[])(null)));
#line 180
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table17.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=08:00:00, endTime=08:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 181
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table17, "Given ");
#line 184
 testRunner.And("the break starts at \'25 Dec 2019 12:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break and the break is in offpeak t" +
            "ime")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break and the break is in offpeak t" +
            "ime")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakAndTheBreakIsInOffpeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break and the break is in offpeak t" +
                    "ime", null, ((string[])(null)));
#line 189
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table18.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 190
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table18, "Given ");
#line 193
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 196
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break and the break is in peak time" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break and the break is in peak time" +
            "")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break and the break is in peak time" +
                    "", null, ((string[])(null)));
#line 198
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table19.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 199
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table19, "Given ");
#line 202
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 205
 testRunner.Then("the clash exposure count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas is after the break and the break is in offpeak t" +
            "ime")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas is after the break and the break is in offpeak t" +
            "ime")]
        public virtual void ADifferenceForAllSalesAreasIsAfterTheBreakAndTheBreakIsInOffpeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas is after the break and the break is in offpeak t" +
                    "ime", null, ((string[])(null)));
#line 207
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table20.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=20:00:00, endTime=20:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 208
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table20, "Given ");
#line 211
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas is after the break and the break is in peak time" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas is after the break and the break is in peak time" +
            "")]
        public virtual void ADifferenceForAllSalesAreasIsAfterTheBreakAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas is after the break and the break is in peak time" +
                    "", null, ((string[])(null)));
#line 216
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table21.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=20:00:00, endTime=20:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 217
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table21, "Given ");
#line 220
 testRunner.And("the break starts at \'25 Dec 2019 12:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break and the break is in offpeak t" +
            "ime but the day is restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break and the break is in offpeak t" +
            "ime but the day is restricted")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakAndTheBreakIsInOffpeakTimeButTheDayIsRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break and the break is in offpeak t" +
                    "ime but the day is restricted", null, ((string[])(null)));
#line 225
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table22.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=0100000",
                        "2",
                        "3"});
#line 226
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table22, "Given ");
#line 229
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break and the break is in peak time" +
            " but the day is restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break and the break is in peak time" +
            " but the day is restricted")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakAndTheBreakIsInPeakTimeButTheDayIsRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break and the break is in peak time" +
                    " but the day is restricted", null, ((string[])(null)));
#line 234
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table23.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=0100000",
                        "2",
                        "3"});
#line 235
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table23, "Given ");
#line 238
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break and the break is in offpeak t" +
            "ime and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break and the break is in offpeak t" +
            "ime and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakAndTheBreakIsInOffpeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break and the break is in offpeak t" +
                    "ime and the day is not restricted", null, ((string[])(null)));
#line 243
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table24.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 244
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table24, "Given ");
#line 247
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 249
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 250
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break and the break is in peak time" +
            " and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break and the break is in peak time" +
            " and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakAndTheBreakIsInPeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break and the break is in peak time" +
                    " and the day is not restricted", null, ((string[])(null)));
#line 252
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table25.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "25 Dec 2019",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 253
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table25, "Given ");
#line 256
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 259
 testRunner.Then("the clash exposure count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break day and the break is in offpe" +
            "ak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break day and the break is in offpe" +
            "ak time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakDayAndTheBreakIsInOffpeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break day and the break is in offpe" +
                    "ak time and the day is not restricted", null, ((string[])(null)));
#line 261
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table26.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 262
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table26, "Given ");
#line 265
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 268
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas contains the break day and the break is in peak " +
            "time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas contains the break day and the break is in peak " +
            "time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasContainsTheBreakDayAndTheBreakIsInPeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas contains the break day and the break is in peak " +
                    "time and the day is not restricted", null, ((string[])(null)));
#line 270
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table27.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 271
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table27, "Given ");
#line 274
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 276
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 277
 testRunner.Then("the clash exposure count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas does not contains the break day and the break is" +
            " in offpeak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas does not contains the break day and the break is" +
            " in offpeak time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasDoesNotContainsTheBreakDayAndTheBreakIsInOffpeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas does not contains the break day and the break is" +
                    " in offpeak time and the day is not restricted", null, ((string[])(null)));
#line 279
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table28.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=1111111",
                        "2",
                        "3"});
#line 280
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table28, "Given ");
#line 283
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for a specific sales areas does not contains the break day and the b" +
            "reak is in offpeak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for a specific sales areas does not contains the break day and the b" +
            "reak is in offpeak time and the day is not restricted")]
        public virtual void ADifferenceForASpecificSalesAreasDoesNotContainsTheBreakDayAndTheBreakIsInOffpeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for a specific sales areas does not contains the break day and the b" +
                    "reak is in offpeak time and the day is not restricted", null, ((string[])(null)));
#line 288
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table29.AddRow(new string[] {
                        "NWS91",
                        "",
                        "",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=1111111",
                        "4",
                        "3"});
#line 289
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table29, "Given ");
#line 292
 testRunner.And("the break starts at \'25 Dec 2019 9:00:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 295
 testRunner.Then("the clash exposure count is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas does not contains the break day and the break is" +
            " in peak time")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas does not contains the break day and the break is" +
            " in peak time")]
        public virtual void ADifferenceForAllSalesAreasDoesNotContainsTheBreakDayAndTheBreakIsInPeakTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas does not contains the break day and the break is" +
                    " in peak time", null, ((string[])(null)));
#line 297
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table30.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=0100000",
                        "2",
                        "3"});
#line 298
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table30, "Given ");
#line 301
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 304
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas without a start date contains the break and the " +
            "break is in peak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas without a start date contains the break and the " +
            "break is in peak time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasWithoutAStartDateContainsTheBreakAndTheBreakIsInPeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas without a start date contains the break and the " +
                    "break is in peak time and the day is not restricted", null, ((string[])(null)));
#line 306
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table31.AddRow(new string[] {
                        "",
                        "",
                        "25 Dec 2019",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=0010000",
                        "2",
                        "3"});
#line 307
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table31, "Given ");
#line 310
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
 testRunner.Then("the clash exposure count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas without a start date does not contain the break " +
            "and the break is in peak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas without a start date does not contain the break " +
            "and the break is in peak time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasWithoutAStartDateDoesNotContainTheBreakAndTheBreakIsInPeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas without a start date does not contain the break " +
                    "and the break is in peak time and the day is not restricted", null, ((string[])(null)));
#line 315
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table32.AddRow(new string[] {
                        "",
                        "",
                        "24 Dec 2019",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=0010000",
                        "2",
                        "3"});
#line 316
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table32, "Given ");
#line 319
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 322
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas without an end date contains the break and the b" +
            "reak is in peak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas without an end date contains the break and the b" +
            "reak is in peak time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasWithoutAnEndDateContainsTheBreakAndTheBreakIsInPeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas without an end date contains the break and the b" +
                    "reak is in peak time and the day is not restricted", null, ((string[])(null)));
#line 324
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table33.AddRow(new string[] {
                        "",
                        "25 Dec 2019",
                        "",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=0010000",
                        "2",
                        "3"});
#line 325
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table33, "Given ");
#line 328
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 329
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 330
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 331
 testRunner.Then("the clash exposure count is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for all sales areas without an end date does not contain the break a" +
            "nd the break is in peak time and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for all sales areas without an end date does not contain the break a" +
            "nd the break is in peak time and the day is not restricted")]
        public virtual void ADifferenceForAllSalesAreasWithoutAnEndDateDoesNotContainTheBreakAndTheBreakIsInPeakTimeAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for all sales areas without an end date does not contain the break a" +
                    "nd the break is in peak time and the day is not restricted", null, ((string[])(null)));
#line 333
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table34.AddRow(new string[] {
                        "",
                        "26 Dec 2019",
                        "",
                        "startTime=12:00:00, endTime=12:59:59, daysOfWeek=0010000",
                        "2",
                        "3"});
#line 334
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table34, "Given ");
#line 337
 testRunner.And("the break starts at \'25 Dec 2019 12:05:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 340
 testRunner.Then("the result is the default peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="A difference for a specific sales areas does not contains the break day and the b" +
            "reak is in offpeak time before the peak and the day is not restricted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculate peak/off peak clash exception count")]
        [Xunit.TraitAttribute("Description", "A difference for a specific sales areas does not contains the break day and the b" +
            "reak is in offpeak time before the peak and the day is not restricted")]
        public virtual void ADifferenceForASpecificSalesAreasDoesNotContainsTheBreakDayAndTheBreakIsInOffpeakTimeBeforeThePeakAndTheDayIsNotRestricted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A difference for a specific sales areas does not contains the break day and the b" +
                    "reak is in offpeak time before the peak and the day is not restricted", null, ((string[])(null)));
#line 342
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "SalesArea",
                        "StartDate",
                        "EndDate",
                        "TimeAndDow",
                        "PeakExposureCount",
                        "OffPeakExposureCount"});
            table35.AddRow(new string[] {
                        "NWS91",
                        "",
                        "",
                        "startTime=08:30:00, endTime=09:30:00, daysOfWeek=1111111",
                        "4",
                        "3"});
#line 343
 testRunner.Given("a clash with these clash exposure differences", ((string)(null)), table35, "Given ");
#line 346
 testRunner.And("the break starts at \'25 Dec 2019 7:30:00\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.And("a peak time running from \'100000\' to \'140000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.When("I calculate the effective clash exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 349
 testRunner.Then("the result is the default off peak exposure count", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalculatePeakOffPeakClashExceptionCountFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalculatePeakOffPeakClashExceptionCountFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
