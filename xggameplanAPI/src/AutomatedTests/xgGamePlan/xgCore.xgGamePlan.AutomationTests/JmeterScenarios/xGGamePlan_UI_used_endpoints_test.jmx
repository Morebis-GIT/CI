<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="xG GamePlan Smoke Load Test" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environmnent variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">${__P(TargetEnvironment,imag-dev04-1-api.xggameplan.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">target environmnent URL</stringProp>
          </elementProp>
          <elementProp name="env:port" elementType="Argument">
            <stringProp name="Argument.name">env:port</stringProp>
            <stringProp name="Argument.value">${__P(TargetEnvironmentPort,)}</stringProp>
            <stringProp name="Argument.desc">target envirronment port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__P(TestUserName,pohordn@gmail.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__P(TestUserPassword,123123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Types variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BreakType" elementType="Argument">
            <stringProp name="Argument.name">BreakType</stringProp>
            <stringProp name="Argument.value">BASE</stringProp>
            <stringProp name="Argument.desc">One of the existed break types existed in the system e.g from list &quot;BASE, PREMIUM&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgrammeType" elementType="Argument">
            <stringProp name="Argument.name">ProgrammeType</stringProp>
            <stringProp name="Argument.value">SPORTS</stringProp>
            <stringProp name="Argument.desc">One of the existed programme category, e.g. one from the list: SPORTS, CHILDREN, NEWS, OTHER</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Script behavior variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="deleteAllAfterTesting" elementType="Argument">
            <stringProp name="Argument.name">deleteAllAfterTesting</stringProp>
            <stringProp name="Argument.value">${__P(DeleteAllAfterTesting,true)}</stringProp>
            <stringProp name="Argument.desc">If Yes then Clean-up requests will be executed</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SQLServerEnabled" elementType="Argument">
            <stringProp name="Argument.name">SQLServerEnabled</stringProp>
            <stringProp name="Argument.value">${__P(SQLServerEnabled,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Global headers" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Clean-up thread  before testing" enabled="true">
        <stringProp name="TestPlan.comments">Calls ALL available delete endpoints</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header - Auth with Master API Key" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(MasterAccessToken,29745509-a5da-4d46-99f2-5da9ccc12b31)}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Used to create a user for session and then use user&apos;s key for all next requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Delete all data?" enabled="true">
          <stringProp name="IfController.condition">${deleteAllAfterTesting}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Demographics" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Demographics/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Programmes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Programmes/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Clashes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Clash/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Clashes Exceptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="dateRangeStart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2000-09-04T12:10:24.513Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateRangeStart</stringProp>
                </elementProp>
                <elementProp name="dateRangeEnd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2030-09-04T12:10:24.513Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateRangeEnd</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ClashException</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Product/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Breaks" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Breaks/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Campaigns" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Campaigns/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Universes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Universes/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL RatingsPredictionSchedules" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">RatingsPredictionSchedules/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Spots" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Spots/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Clearance Codes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ClearanceCode/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Programmes/Classifications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Programmes/Classifications/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Restrictions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="dateRangeStart" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2000-09-18T07:39:40.081Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateRangeStart</stringProp>
                </elementProp>
                <elementProp name="dateRangeEnd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2030-09-18T07:39:40.081Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dateRangeEnd</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Restrictions</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Sponsorships" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Sponsorships/DeleteAllDelete</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Pre-Scenario requests" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Disabled for now because of the issue with creation a new user</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header - Auth with Master API Key" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(MasterAccessToken,7971c540-54e1-4522-81c0-7cc822cc9b70)}</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Used to create a user for session and then use user&apos;s key for all next requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="User Random name generator" enabled="true">
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat">name-000000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">rnd_user_name</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create User" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${rnd_user_name}&quot;,&#xd;
  &quot;surname&quot;: &quot;${rnd_user_name}&quot;,&#xd;
  &quot;email&quot;: &quot;${rnd_user_name}@testdomain.com&quot;,&#xd;
  &quot;themeName&quot;: &quot;string&quot;,&#xd;
  &quot;location&quot;: &quot;string&quot;,&#xd;
  &quot;role&quot;: &quot;SuperUser&quot;,&#xd;
  &quot;tenantId&quot;: 0,&#xd;
  &quot;region&quot;: &quot;Europe/London&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port">${env:port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/users</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="User Random password generator" enabled="true">
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat">password-000000</stringProp>
          <boolProp name="perThread">false</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">rnd_password</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Password" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${userId}&quot;,&#xd;
  &quot;currentPassword&quot;: &quot;${rnd_password}&quot;,&#xd;
  &quot;newPassword&quot;: &quot;${rnd_password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port">${env:port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">users/${userId}/password</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get access token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;email&quot;: &quot;${rnd_user_name}@testdomain.com&quot;,&#xd;
  &quot;password&quot;: &quot;${rnd_password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${env}</stringProp>
          <stringProp name="HTTPSampler.port">${env:port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">accesstokens</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get token from response" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Set token variable" enabled="true">
          <stringProp name="BeanShellAssertion.query">${__setProperty(token, ${token})};</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header - Auth" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__property(token)} </stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">token to use after registered a new user</stringProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header - Auth with Master API Key" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__P(MasterAccessToken,29745509-a5da-4d46-99f2-5da9ccc12b31)}</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Used to create a user for session and then use user&apos;s key for all next requests</stringProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header - Performance Tests ID" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">perf-test-id</stringProp>
            <stringProp name="Header.value">perf-test-id-${__counter(false,)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Scenario thread group" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Def Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(RepeatCount,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Steps" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Metadata" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Metadata BreakTypes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="key" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">BreakTypes</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">key</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Metadata</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ClearanceCodeId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Metadata ProgramCategories" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="key" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ProgramCategories</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">key</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Metadata</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ClearanceCodeId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Demographics" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Demographics Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">name-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_d_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Demographic" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;externalRef&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;name&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;shortName&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;displayOrder&quot;: 0,&#xd;
    &quot;gameplan&quot;: true&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Demographics</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Demographics" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Demographics/externalref/${rnd_d_name}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Demographic" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;externalRef&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;name&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;shortName&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;displayOrder&quot;: 0,&#xd;
    &quot;gameplan&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Demographics/externalref/${rnd_d_name}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sales Areas" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="SalesAreas Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">sa_name-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_sa_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Sales Area" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
  &quot;shortName&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
  &quot;currencyCode&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
  &quot;baseDemographic1&quot;: &quot;${rnd_d_name}&quot;,&#xd;
  &quot;baseDemographic2&quot;: &quot;${rnd_d_name}&quot;,&#xd;
  &quot;channelGroup&quot;: [&#xd;
    &quot;GTV01&quot;&#xd;
  ],&#xd;
  &quot;startOffset&quot;: &quot;1:28:48.4779237&quot;,&#xd;
  &quot;dayDuration&quot;: &quot;1:28:48.4779237&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">SalesAreas</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Sales Areas" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">SalesAreas</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Programmes" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Programme Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">prname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_pr_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Program" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;startDateTime&quot;: &quot;2019-07-04T12:01:22.132Z&quot;,&#xd;
    &quot;duration&quot;: &quot;1:28:48.4779237&quot;,&#xd;
    &quot;externalReference&quot;: &quot;${rnd_pr_name}&quot;,&#xd;
    &quot;programmeName&quot;: &quot;${rnd_pr_name}&quot;,&#xd;
    &quot;description&quot;: &quot;string&quot;,&#xd;
    &quot;programmeCategories&quot;: [&#xd;
      &quot;${ProgrammeType}&quot;&#xd;
    ],&#xd;
    &quot;classification&quot;: &quot;${ProgrammeType}&quot;,&#xd;
    &quot;liveBroadcast&quot;: true&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Programmes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="datefrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">datefrom</stringProp>
                  </elementProp>
                  <elementProp name="dateto" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateto</stringProp>
                  </elementProp>
                  <elementProp name="salesarea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesarea</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search ALL Programmes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="queryModel.fromDateInclusive" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.fromDateInclusive</stringProp>
                  </elementProp>
                  <elementProp name="queryModel.toDateInclusive" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.toDateInclusive</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes/SearchAll</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clashes" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Clash Random name generator" enabled="true">
              <stringProp name="maximumValue">99999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">c00000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_clash_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Clash" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;parentExternalidentifier&quot;: null,&#xd;
    &quot;description&quot;: &quot;clash description&quot;,&#xd;
    &quot;defaultPeakExposureCount&quot;: 1,&#xd;
    &quot;defaultOffPeakExposureCount&quot;: 1,&#xd;
    &quot;differences&quot;: [&#xd;
    ],&#xd;
    &quot;externalref&quot;: &quot;${rnd_clash_name}&quot;&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Clash</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Clashes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Clash</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor Last Clash ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ClashId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Clash by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Clash/${ClashId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Clash by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="queryModel.nameOrRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ClashId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.nameOrRef</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Clash/SearchAll</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Clash" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;parentExternalidentifier&quot;: null,&#xd;
    &quot;description&quot;: &quot;updated clash description&quot;,&#xd;
    &quot;defaultPeakExposureCount&quot;: 2,&#xd;
    &quot;defaultOffPeakExposureCount&quot;: 2,&#xd;
    &quot;differences&quot;: [&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Clash?id=${ClashId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clash Exceptions" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Clash Exception" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;startDate&quot;: &quot;2029-09-04T12:10:24.513Z&quot;,&#xd;
    &quot;endDate&quot;: &quot;2029-09-04T12:10:24.513Z&quot;,&#xd;
    &quot;fromType&quot;: &quot;Clash&quot;,&#xd;
    &quot;toType&quot;: &quot;Clash&quot;,&#xd;
    &quot;includeOrExclude&quot;: &quot;E&quot;,&#xd;
    &quot;fromValue&quot;: &quot;${rnd_clash_name}&quot;,&#xd;
    &quot;toValue&quot;: &quot;${rnd_clash_name}&quot;,&#xd;
    &quot;timeAndDows&quot;: [&#xd;
      {&#xd;
        &quot;startTime&quot;: &quot;12:10:24&quot;,&#xd;
        &quot;endTime&quot;: &quot;12:20:24&quot;,&#xd;
        &quot;daysOfWeek&quot;: &quot;1111111&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClashException</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Clash Exceptions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="searchQuery.startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2029-09-04T12:10:24.513Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">searchQuery.startDate</stringProp>
                  </elementProp>
                  <elementProp name="searchQuery.endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-09-04T12:10:24.513Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">searchQuery.endDate</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClashException</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor Last Exception ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">clashExeptionId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[-1:].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Clash Exception by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClashException/${clashExeptionId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Clash Exception" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;endDate&quot;: &quot;2029-09-04T12:10:24.513Z&quot;,&#xd;
  &quot;includeOrExclude&quot;: &quot;E&quot;,&#xd;
  &quot;timeAndDows&quot;: [&#xd;
    {&#xd;
      &quot;startTime&quot;: &quot;12:10:24&quot;,&#xd;
       &quot;endTime&quot;: &quot;12:20:24&quot;,&#xd;
       &quot;daysOfWeek&quot;: &quot;1111111&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClashException/${clashExeptionId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Products" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Product Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">prname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_prod_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Advertiser Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">advname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_adv_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Product" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;externalidentifier&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;parentExternalidentifier&quot;: &quot;string&quot;,&#xd;
    &quot;name&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;effectiveStartDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;effectiveEndDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;clashCode&quot;: &quot;${rnd_clash_name}&quot;,&#xd;
    &quot;advertiserIdentifier&quot;: &quot;${rnd_adv_name}&quot;,&#xd;
    &quot;advertiserName&quot;: &quot;${rnd_adv_name}&quot;,&#xd;
    &quot;advertiserLinkStartDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;advertiserLinkEndDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;agencyIdentifier&quot;: &quot;string&quot;,&#xd;
    &quot;agencyName&quot;: &quot;string&quot;,&#xd;
    &quot;agencyStartDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;agencyLinkEndDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Product External Identificator" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">productExtId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].externalidentifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Product UID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">productUID</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Products" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="queryModel.fromDateInclusive" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2009-07-04T12:01:22.130Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.fromDateInclusive</stringProp>
                  </elementProp>
                  <elementProp name="queryModel.toDateInclusive" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.130Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.toDateInclusive</stringProp>
                  </elementProp>
                  <elementProp name="queryModel.nameOrRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${productExtId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.nameOrRef</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Product by External ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product/externalref/${productExtId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Product by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product/${productId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Product by Advertiser" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="queryModel.advertiserNameorRef" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_adv_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.advertiserNameorRef</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product/Advertiser/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Product" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;externalidentifier&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;parentExternalidentifier&quot;: &quot;string_updated&quot;,&#xd;
    &quot;name&quot;: &quot;${rnd_prod_name}_updated&quot;,&#xd;
    &quot;effectiveStartDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;effectiveEndDate&quot;: &quot;2019-07-05T12:01:22.130Z&quot;,&#xd;
    &quot;clashCode&quot;: &quot;${rnd_clash_name}&quot;,&#xd;
    &quot;advertiserIdentifier&quot;: &quot;${rnd_adv_name}_updated&quot;,&#xd;
    &quot;advertiserName&quot;: &quot;${rnd_adv_name}_updated&quot;,&#xd;
    &quot;advertiserLinkStartDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;advertiserLinkEndDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;agencyIdentifier&quot;: &quot;string_updated&quot;,&#xd;
    &quot;agencyName&quot;: &quot;string_updated&quot;,&#xd;
    &quot;agencyStartDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;,&#xd;
    &quot;agencyLinkEndDate&quot;: &quot;2019-07-04T12:01:22.130Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Product/externalref/${rnd_prod_name}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Breaks" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Breaks Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">prname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_break_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Breaks" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;scheduledDate&quot;: &quot;2019-07-04T12:01:22.062Z&quot;,&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;breakType&quot;: &quot;${BreakType}&quot;,&#xd;
    &quot;duration&quot;: &quot;1:28:48.4779237&quot;,&#xd;
    &quot;optimize&quot;: true,&#xd;
    &quot;externalBreakRef&quot;: &quot;${rnd_break_name}&quot;,&#xd;
    &quot;description&quot;: &quot;string&quot;,&#xd;
    &quot;externalProgRef&quot;: &quot;${rnd_pr_name}&quot;&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Breaks</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Breaks" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Breaks</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">breakId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[-1:].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Break by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Breaks/${breakId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Programmes/Classification" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Programmes/Classification Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">prname000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_programmesClassification_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Programmes/Classification Random UID generator" enabled="true">
              <stringProp name="maximumValue">99999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">10000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_programmesClassification_uid</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Programmes/Classification" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;uid&quot;: ${rnd_programmesClassification_uid},&#xd;
    &quot;code&quot;: &quot;${rnd_programmesClassification_name}&quot;,&#xd;
    &quot;description&quot;: &quot;${rnd_programmesClassification_name}&quot;&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes/Classifications</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programmes/Classification" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes/Classifications</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">programmeClassificationId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Programmes/Classifications by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes/Classifications/${programmeClassificationId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Programmes/Classification Random new UID generator" enabled="true">
              <stringProp name="maximumValue">99999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">10000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_programmesClassification_uid_changed</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Programmes/Classification by ID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;uid&quot;: ${rnd_programmesClassification_uid_changed},&#xd;
  &quot;code&quot;: &quot;${rnd_programmesClassification_name}&quot;,&#xd;
  &quot;description&quot;: &quot;${rnd_programmesClassification_name}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Programmes/Classifications?id=${rnd_programmesClassification_uid}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Campaigns" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Campaign Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">prname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_cmpgn_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Campaigns" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;externalId&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
    &quot;name&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
    &quot;demoGraphic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;startDateTime&quot;: &quot;2019-04-04T12:01:22.064Z&quot;,&#xd;
    &quot;endDateTime&quot;: &quot;2019-07-04T12:01:22.064Z&quot;,&#xd;
    &quot;product&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;revenueBudget&quot;: 0,&#xd;
    &quot;targetRatings&quot;: 1000,&#xd;
    &quot;actualRatings&quot;: 90,&#xd;
    &quot;campaignGroup&quot;: &quot;string&quot;,&#xd;
    &quot;isPercentage&quot;: false,&#xd;
    &quot;status&quot;: &quot;A&quot;,&#xd;
    &quot;businessType&quot;: &quot;Dynamic&quot;,&#xd;
    &quot;includeOptimisation&quot;: true,&#xd;
    &quot;inefficientSpotRemoval&quot;: true,&#xd;
    &quot;includeRightSizer&quot;: &quot;No&quot;,&#xd;
    &quot;expectedClearanceCode&quot;: &quot;string&quot;,&#xd;
    &quot;campaignPassPriority&quot;: 0,&#xd;
    &quot;breakType&quot;: [&#xd;
      &quot;${BreakType}&quot;&#xd;
    ],&#xd;
    &quot;campaignSpotMaxRatings&quot;: 0,&#xd;
    &quot;salesAreaCampaignTarget&quot;: [&#xd;
      {&#xd;
        &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
        &quot;salesAreaGroup&quot;: {&#xd;
          &quot;groupName&quot;: &quot;string&quot;,&#xd;
          &quot;salesAreas&quot;: [&#xd;
            &quot;${rnd_sa_name}&quot;&#xd;
          ]&#xd;
        },&#xd;
        &quot;multiparts&quot;: [&#xd;
          {&#xd;
            &quot;multipartNumber&quot;: 0,&#xd;
            &quot;lengths&quot;: [&#xd;
              &quot;1:28:48.4779237&quot;&#xd;
            ],&#xd;
            &quot;desiredPercentageSplit&quot;: 1000,&#xd;
            &quot;currentPercentageSplit&quot;: 90&#xd;
          }&#xd;
        ],&#xd;
        &quot;campaignTargets&quot;: [&#xd;
          {&#xd;
            &quot;strikeWeights&quot;: [&#xd;
              {&#xd;
                &quot;startDate&quot;: &quot;2019-07-04T12:01:22.065Z&quot;,&#xd;
                &quot;endDate&quot;: &quot;2019-09-04T12:01:22.065Z&quot;,&#xd;
                &quot;desiredPercentageSplit&quot;: 1000,&#xd;
                &quot;currentPercentageSplit&quot;: 90,&#xd;
                &quot;lengths&quot;: [&#xd;
                  {&#xd;
                    &quot;multipartNumber&quot;: 0,&#xd;
                    &quot;length&quot;: &quot;1:28:48.4779237&quot;,&#xd;
                    &quot;desiredPercentageSplit&quot;: 1000,&#xd;
                    &quot;currentPercentageSplit&quot;: 90&#xd;
                  }&#xd;
                ],&#xd;
                &quot;dayParts&quot;: [&#xd;
                  {&#xd;
                    &quot;desiredPercentageSplit&quot;: 1000,&#xd;
                    &quot;currentPercentageSplit&quot;: 90,&#xd;
                    &quot;timeslices&quot;: [&#xd;
                      {&#xd;
                        &quot;fromTime&quot;: &quot;12:01&quot;,&#xd;
                        &quot;toTime&quot;: &quot;12:06&quot;,&#xd;
                        &quot;dowPattern&quot;: [&#xd;
                          &quot;Tue&quot;&#xd;
                        ]&#xd;
                      }&#xd;
                    ],&#xd;
                    &quot;spotMaxRatings&quot;: 0&#xd;
                  }&#xd;
                ],&#xd;
                &quot;spotMaxRatings&quot;: 0&#xd;
              }&#xd;
            ]&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ],&#xd;
    &quot;timeRestrictions&quot;: [&#xd;
      {&#xd;
        &quot;salesAreas&quot;: [&#xd;
          &quot;${rnd_sa_name}&quot;&#xd;
        ],&#xd;
        &quot;dowPattern&quot;: [&#xd;
          &quot;Tue&quot;&#xd;
        ],&#xd;
        &quot;startDateTime&quot;: &quot;2019-07-04T12:01:22.065Z&quot;,&#xd;
        &quot;endDateTime&quot;: &quot;2019-08-04T12:01:22.065Z&quot;,&#xd;
        &quot;isIncludeOrExclude&quot;: &quot;E&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;programmeRestrictions&quot;: [&#xd;
      {&#xd;
        &quot;${rnd_sa_name}&quot;: [&#xd;
          &quot;string&quot;&#xd;
        ],&#xd;
        &quot;categoryOrProgramme&quot;: [&#xd;
          &quot;string&quot;&#xd;
        ],&#xd;
        &quot;isCategoryOrProgramme&quot;: &quot;P&quot;,&#xd;
        &quot;isIncludeOrExclude&quot;: &quot;E&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Campaigns" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Campaign ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">campaignId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Campaign External Reference" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">campaignExtId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].externalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Campaign group" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">campaignGroup</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].campaignGroup</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Campaign by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns/${campaignId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Campaign by External ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns/externalref/${campaignExtId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Campaigns" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="queryModel.startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.startDate</stringProp>
                  </elementProp>
                  <elementProp name="queryModel.endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">queryModel.endDate</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Campaigns Group" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns/Group/${campaignGroup}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Campaign by External ID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;externalId&quot;: &quot;${campaignExtId}&quot;,&#xd;
    &quot;name&quot;: &quot;${rnd_cmpgn_name}_updated&quot;,&#xd;
    &quot;demoGraphic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;startDateTime&quot;: &quot;2019-04-04T12:01:22.064Z&quot;,&#xd;
    &quot;endDateTime&quot;: &quot;2019-07-04T12:01:22.064Z&quot;,&#xd;
    &quot;product&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;revenueBudget&quot;: 0,&#xd;
    &quot;targetRatings&quot;: 0,&#xd;
    &quot;actualRatings&quot;: 0,&#xd;
    &quot;campaignGroup&quot;: &quot;string&quot;,&#xd;
    &quot;isPercentage&quot;: false,&#xd;
    &quot;status&quot;: &quot;A&quot;,&#xd;
    &quot;businessType&quot;: &quot;Dynamic&quot;,&#xd;
    &quot;includeOptimisation&quot;: true,&#xd;
    &quot;inefficientSpotRemoval&quot;: true,&#xd;
    &quot;includeRightSizer&quot;: &quot;No&quot;,&#xd;
    &quot;expectedClearanceCode&quot;: &quot;string&quot;,&#xd;
    &quot;campaignPassPriority&quot;: 0,&#xd;
    &quot;breakType&quot;: [&#xd;
      &quot;${BreakType}&quot;&#xd;
    ],&#xd;
    &quot;campaignSpotMaxRatings&quot;: 0,&#xd;
    &quot;salesAreaCampaignTarget&quot;: [&#xd;
      {&#xd;
        &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
        &quot;salesAreaGroup&quot;: {&#xd;
          &quot;groupName&quot;: &quot;string&quot;,&#xd;
          &quot;salesAreas&quot;: [&#xd;
            &quot;${rnd_sa_name}&quot;&#xd;
          ]&#xd;
        },&#xd;
        &quot;multiparts&quot;: [&#xd;
          {&#xd;
            &quot;multipartNumber&quot;: 0,&#xd;
            &quot;lengths&quot;: [&#xd;
              &quot;1:28:48.4779237&quot;&#xd;
            ],&#xd;
            &quot;desiredPercentageSplit&quot;: 0,&#xd;
            &quot;currentPercentageSplit&quot;: 0&#xd;
          }&#xd;
        ],&#xd;
        &quot;campaignTargets&quot;: [&#xd;
          {&#xd;
            &quot;strikeWeights&quot;: [&#xd;
              {&#xd;
                &quot;startDate&quot;: &quot;2019-07-04T12:01:22.065Z&quot;,&#xd;
                &quot;endDate&quot;: &quot;2019-09-04T12:01:22.065Z&quot;,&#xd;
                &quot;desiredPercentageSplit&quot;: 0,&#xd;
                &quot;currentPercentageSplit&quot;: 0,&#xd;
                &quot;lengths&quot;: [&#xd;
                  {&#xd;
                    &quot;multipartNumber&quot;: 0,&#xd;
                    &quot;length&quot;: &quot;1:28:48.4779237&quot;,&#xd;
                    &quot;desiredPercentageSplit&quot;: 0,&#xd;
                    &quot;currentPercentageSplit&quot;: 0&#xd;
                  }&#xd;
                ],&#xd;
                &quot;dayParts&quot;: [&#xd;
                  {&#xd;
                    &quot;desiredPercentageSplit&quot;: 0,&#xd;
                    &quot;currentPercentageSplit&quot;: 0,&#xd;
                    &quot;timeslices&quot;: [&#xd;
                      {&#xd;
                        &quot;fromTime&quot;: &quot;12:01&quot;,&#xd;
                        &quot;toTime&quot;: &quot;12:06&quot;,&#xd;
                        &quot;dowPattern&quot;: [&#xd;
                          &quot;Tue&quot;&#xd;
                        ]&#xd;
                      }&#xd;
                    ],&#xd;
                    &quot;spotMaxRatings&quot;: 0&#xd;
                  }&#xd;
                ],&#xd;
                &quot;spotMaxRatings&quot;: 0&#xd;
              }&#xd;
            ]&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ],&#xd;
    &quot;timeRestrictions&quot;: [&#xd;
      {&#xd;
        &quot;salesAreas&quot;: [&#xd;
          &quot;${rnd_sa_name}&quot;&#xd;
        ],&#xd;
        &quot;dowPattern&quot;: [&#xd;
          &quot;Tue&quot;&#xd;
        ],&#xd;
        &quot;startDateTime&quot;: &quot;2019-07-04T12:01:22.065Z&quot;,&#xd;
        &quot;endDateTime&quot;: &quot;2019-08-04T12:01:22.065Z&quot;,&#xd;
        &quot;isIncludeOrExclude&quot;: &quot;E&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;programmeRestrictions&quot;: [&#xd;
      {&#xd;
        &quot;${rnd_sa_name}&quot;: [&#xd;
          &quot;string&quot;&#xd;
        ],&#xd;
        &quot;categoryOrProgramme&quot;: [&#xd;
          &quot;string&quot;&#xd;
        ],&#xd;
        &quot;isCategoryOrProgramme&quot;: &quot;P&quot;,&#xd;
        &quot;isIncludeOrExclude&quot;: &quot;E&quot;&#xd;
      }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns/externalref/${campaignExtId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Universes" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Universe Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">uniname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_universe_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Universe" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;demographic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;startDate&quot;: &quot;2019-09-30T07:19:53.471Z&quot;,&#xd;
    &quot;endDate&quot;: &quot;2019-10-30T07:19:53.471Z&quot;,&#xd;
    &quot;universeValue&quot;: 1&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Universes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Universes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Universes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Campaign ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">universeId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Universe by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Universes/${universeId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Universes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">startDate</stringProp>
                  </elementProp>
                  <elementProp name="endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">endDate</stringProp>
                  </elementProp>
                  <elementProp name="demographics" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_d_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">demographics</stringProp>
                  </elementProp>
                  <elementProp name="salesAreas" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesAreas</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Campaigns/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Rating Prediction Schedules" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RPS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;scheduleDay&quot;: &quot;2019-07-04T12:01:22.134Z&quot;,&#xd;
    &quot;ratings&quot;: [&#xd;
      {&#xd;
        &quot;time&quot;: &quot;2019-07-04T12:01:22.134Z&quot;,&#xd;
        &quot;demographic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
        &quot;noOfRatings&quot;: 0&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">RatingsPredictionSchedules</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get RPS" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fromScheduleDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2010-07-07T00:00:00.297Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">fromScheduleDate</stringProp>
                  </elementProp>
                  <elementProp name="toScheduleDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-08-07T00:00:00.297Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">toScheduleDate</stringProp>
                  </elementProp>
                  <elementProp name="salesArea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesArea</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">RatingsPredictionSchedules/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Spots" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Spots Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">prname-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_spot_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Spots" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;externalCampaignNumber&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;groupCode&quot;: &quot;string&quot;,&#xd;
    &quot;externalSpotRef&quot;: &quot;${rnd_spot_name}&quot;,&#xd;
    &quot;startDateTime&quot;: &quot;2019-07-04T12:01:22.168Z&quot;,&#xd;
    &quot;endDateTime&quot;: &quot;2019-07-04T12:01:22.168Z&quot;,&#xd;
    &quot;spotLength&quot;: &quot;1:28:48.4779237&quot;,&#xd;
    &quot;breakType&quot;: &quot;${BreakType}&quot;,&#xd;
    &quot;product&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;demographic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;clientPicked&quot;: true,&#xd;
    &quot;multipartSpot&quot;: &quot;string&quot;,&#xd;
    &quot;multipartSpotPosition&quot;: &quot;string&quot;,&#xd;
    &quot;multipartSpotRef&quot;: &quot;string&quot;,&#xd;
    &quot;requestedPositioninBreak&quot;: &quot;string&quot;,&#xd;
    &quot;actualPositioninBreak&quot;: &quot;string&quot;,&#xd;
    &quot;breakRequest&quot;: &quot;string&quot;,&#xd;
    &quot;externalBreakNo&quot;: &quot;string&quot;,&#xd;
    &quot;sponsored&quot;: true,&#xd;
    &quot;preemptable&quot;: true,&#xd;
    &quot;preemptlevel&quot;: 0,&#xd;
    &quot;industryCode&quot;: &quot;string&quot;,&#xd;
    &quot;clearanceCode&quot;: &quot;string&quot;,&#xd;
    &quot;isBooked&quot;: true&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Spots" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Spot ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">spotId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - External Campaign Number ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">externalCampaignNumberId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].externalCampaignNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Spot External ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">externalSpotId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.[-1:].externalSpotRef</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Spots" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;externalCampaignNumber&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;groupCode&quot;: &quot;string&quot;,&#xd;
    &quot;externalSpotRef&quot;: &quot;${rnd_spot_name}&quot;,&#xd;
    &quot;startDateTime&quot;: &quot;2019-07-04T12:01:22.168Z&quot;,&#xd;
    &quot;endDateTime&quot;: &quot;2019-07-04T12:01:22.168Z&quot;,&#xd;
    &quot;spotLength&quot;: &quot;1:28:48.4779237&quot;,&#xd;
    &quot;breakType&quot;: &quot;${BreakType}&quot;,&#xd;
    &quot;product&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;demographic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;clientPicked&quot;: true,&#xd;
    &quot;multipartSpot&quot;: &quot;string&quot;,&#xd;
    &quot;multipartSpotPosition&quot;: &quot;string&quot;,&#xd;
    &quot;multipartSpotRef&quot;: &quot;string&quot;,&#xd;
    &quot;requestedPositioninBreak&quot;: &quot;string&quot;,&#xd;
    &quot;actualPositioninBreak&quot;: &quot;string&quot;,&#xd;
    &quot;breakRequest&quot;: &quot;string&quot;,&#xd;
    &quot;externalBreakNo&quot;: &quot;string&quot;,&#xd;
    &quot;sponsored&quot;: true,&#xd;
    &quot;preemptable&quot;: true,&#xd;
    &quot;preemptlevel&quot;: 0,&#xd;
    &quot;industryCode&quot;: &quot;string&quot;,&#xd;
    &quot;clearanceCode&quot;: &quot;string&quot;,&#xd;
    &quot;isBooked&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots?id=${spotId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Spots by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots/${spotId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Spots by External Campaign Reference" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots/campaignRef/${externalCampaignNumberId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Spots" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="datefrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">datefrom</stringProp>
                  </elementProp>
                  <elementProp name="dateto" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateto</stringProp>
                  </elementProp>
                  <elementProp name="salesarea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesarea</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Spots by External ID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;externalCampaignNumber&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
    &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;groupCode&quot;: &quot;string&quot;,&#xd;
    &quot;externalSpotRef&quot;: &quot;${rnd_spot_name}&quot;,&#xd;
    &quot;startDateTime&quot;: &quot;2019-07-04T12:01:22.168Z&quot;,&#xd;
    &quot;endDateTime&quot;: &quot;2019-07-04T12:01:22.168Z&quot;,&#xd;
    &quot;spotLength&quot;: &quot;1:28:48.4779237&quot;,&#xd;
    &quot;breakType&quot;: &quot;${BreakType}&quot;,&#xd;
    &quot;product&quot;: &quot;${rnd_prod_name}&quot;,&#xd;
    &quot;demographic&quot;: &quot;${rnd_d_name}&quot;,&#xd;
    &quot;clientPicked&quot;: true,&#xd;
    &quot;multipartSpot&quot;: &quot;string&quot;,&#xd;
    &quot;multipartSpotPosition&quot;: &quot;string&quot;,&#xd;
    &quot;multipartSpotRef&quot;: &quot;string&quot;,&#xd;
    &quot;requestedPositioninBreak&quot;: &quot;string&quot;,&#xd;
    &quot;actualPositioninBreak&quot;: &quot;string&quot;,&#xd;
    &quot;breakRequest&quot;: &quot;string&quot;,&#xd;
    &quot;externalBreakNo&quot;: &quot;string&quot;,&#xd;
    &quot;sponsored&quot;: true,&#xd;
    &quot;preemptable&quot;: true,&#xd;
    &quot;preemptlevel&quot;: 0,&#xd;
    &quot;industryCode&quot;: &quot;string&quot;,&#xd;
    &quot;clearanceCode&quot;: &quot;string&quot;,&#xd;
    &quot;isBooked&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots/externalref/${externalSpotId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get BreakAndProgrammeInfo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="datefrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">datefrom</stringProp>
                  </elementProp>
                  <elementProp name="dateto" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.065Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateto</stringProp>
                  </elementProp>
                  <elementProp name="salesarea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesarea</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Spots/BreakAndProgrammeInfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Channels" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Channels random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">channel-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_channel_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Channel" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303</stringProp>
                    <stringProp name="File.paramname"></stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${rnd_channel_name}&quot;,&#xd;
  &quot;shortName&quot;: &quot;${rnd_channel_name}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Channels</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Channels" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Channels</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">channelId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*.uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Channels random name generator #2" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">channel-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_channel_name2</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Channel" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${rnd_channel_name2}&quot;,&#xd;
  &quot;shortName&quot;: &quot;${rnd_channel_name2}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Channels?id=${channelId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clearance Code" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Clearance Code random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">clrcode-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_clearance_code_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Clearance Code" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303</stringProp>
                    <stringProp name="File.paramname"></stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;code&quot;: &quot;${rnd_clearance_code_name}&quot;,&#xd;
    &quot;description&quot;: &quot;description for ${rnd_clearance_code_name}&quot;&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClearanceCode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Clearance Codes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClearanceCode</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ClearanceCodeId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Clearance Code random name generator #2" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">clrcode-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_clearance_code_name_new</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Clearance Code" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303</stringProp>
                    <stringProp name="File.paramname"></stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;${ClearanceCodeId}&quot;,&#xd;
	&quot;code&quot;: &quot;${rnd_clearance_code_name_new}&quot;,&#xd;
	&quot;description&quot;: &quot;description for ${rnd_clearance_code_name_new}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ClearanceCode/${ClearanceCodeId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Restrictions" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Clearance Code random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">rndRestrId-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rndRestrExtId</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Restriction" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;externalIdentifier&quot;: &quot;${rndRestrExtId}&quot;,&#xd;
  &quot;salesAreas&quot;: [&#xd;
    &quot;${rnd_sa_name}&quot;&#xd;
  ],&#xd;
  &quot;startDate&quot;: &quot;2019-09-18T07:39:40.081Z&quot;,&#xd;
  &quot;endDate&quot;: &quot;2019-09-18T07:39:40.081Z&quot;,&#xd;
  &quot;startTime&quot;: &quot;07:39:40&quot;,&#xd;
  &quot;endTime&quot;: &quot;07:39:45&quot;,&#xd;
  &quot;restrictionDays&quot;: &quot;1111111&quot;,&#xd;
  &quot;schoolHolidayIndicator&quot;: &quot;X&quot;,&#xd;
  &quot;publicHolidayIndicator&quot;: &quot;X&quot;,&#xd;
  &quot;liveProgrammeIndicator&quot;: &quot;I&quot;,&#xd;
  &quot;restrictionType&quot;: &quot;Time&quot;,&#xd;
  &quot;restrictionBasis&quot;: &quot;ClearanceCode&quot;,&#xd;
  &quot;externalProgRef&quot;: &quot;&quot;,&#xd;
  &quot;programmeCategory&quot;: &quot;&quot;,&#xd;
  &quot;programmeClassification&quot;: &quot;&quot;,&#xd;
  &quot;programmeClassificationIndicator&quot;: &quot;I&quot;,&#xd;
  &quot;timeToleranceMinsBefore&quot;: 0,&#xd;
  &quot;timeToleranceMinsAfter&quot;: 0,&#xd;
  &quot;indexType&quot;: 0,&#xd;
  &quot;indexThreshold&quot;: 0,&#xd;
  &quot;productCode&quot;: 0,&#xd;
  &quot;clashCode&quot;: &quot;&quot;,&#xd;
  &quot;clearanceCode&quot;: &quot;${rnd_clearance_code_name_new}&quot;,&#xd;
  &quot;clockNumber&quot;: 0&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Restrictions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Restrictions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="searchQuery.dateRangeStart" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-09-18T07:39:40.081Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">searchQuery.dateRangeStart</stringProp>
                  </elementProp>
                  <elementProp name="searchQuery.dateRangeEnd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-09-18T07:39:40.081Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">searchQuery.dateRangeEnd</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Restrictions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">restrictionId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">restrictionExternalIdentifier</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[-1:].externalIdentifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Restriction by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Restrictions/${restrictionId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Restriction" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;externalIdentifier&quot;: &quot;${rndRestrExtId}&quot;,	&#xd;
  &quot;salesAreas&quot;: [&#xd;
    &quot;${rnd_sa_name}&quot;&#xd;
  ],&#xd;
  &quot;startDate&quot;: &quot;2019-09-15T07:39:40.081Z&quot;,&#xd;
  &quot;endDate&quot;: &quot;2019-09-15T07:39:40.081Z&quot;,&#xd;
  &quot;startTime&quot;: &quot;08:39:40&quot;,&#xd;
  &quot;endTime&quot;: &quot;08:39:45&quot;,&#xd;
  &quot;restrictionDays&quot;: &quot;1111111&quot;,&#xd;
  &quot;schoolHolidayIndicator&quot;: &quot;X&quot;,&#xd;
  &quot;publicHolidayIndicator&quot;: &quot;X&quot;,&#xd;
  &quot;liveProgrammeIndicator&quot;: &quot;I&quot;,&#xd;
  &quot;restrictionType&quot;: &quot;Time&quot;,&#xd;
  &quot;restrictionBasis&quot;: &quot;ClearanceCode&quot;,&#xd;
  &quot;externalProgRef&quot;: &quot;&quot;,&#xd;
  &quot;programmeCategory&quot;: &quot;&quot;,&#xd;
  &quot;programmeClassification&quot;: &quot;&quot;,&#xd;
  &quot;programmeClassificationIndicator&quot;: &quot;I&quot;,&#xd;
  &quot;timeToleranceMinsBefore&quot;: 0,&#xd;
  &quot;timeToleranceMinsAfter&quot;: 0,&#xd;
  &quot;indexType&quot;: 0,&#xd;
  &quot;indexThreshold&quot;: 0,&#xd;
  &quot;productCode&quot;: 0,&#xd;
  &quot;clashCode&quot;: &quot;&quot;,&#xd;
  &quot;clearanceCode&quot;: &quot;${rnd_clearance_code_name_new}&quot;,&#xd;
  &quot;clockNumber&quot;: 0&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Restrictions/${restrictionExternalIdentifier}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Languages" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Languages" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Restrictions/${restrictionId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ISRSettings" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create ISRSetting" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;DemographicsSettings&quot;: [],&#xd;
    &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;DefaultEfficiencyThreshold&quot;: 56,&#xd;
    &quot;BreakType&quot;: &quot;BASIC&quot;,&#xd;
    &quot;SelectableDays&quot;: [&#xd;
        &quot;Sunday&quot;,&#xd;
        &quot;Monday&quot;,&#xd;
        &quot;Tuesday&quot;&#xd;
    ],&#xd;
    &quot;StartTime&quot;: &quot;00:00:00.0000235&quot;,&#xd;
    &quot;EndTime&quot;: &quot;00:00:00.0000239&quot;,&#xd;
    &quot;ExcludePublicHolidays&quot;: true,&#xd;
    &quot;ExcludeSchoolHolidays&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/ISRSettings</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ISRSetting" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="salesArea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesArea</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/ISRSettings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update ISRSetting" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;DemographicsSettings&quot;: [],&#xd;
    &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
    &quot;DefaultEfficiencyThreshold&quot;: 100,&#xd;
    &quot;BreakType&quot;: &quot;PREMIUM&quot;,&#xd;
    &quot;SelectableDays&quot;: [&#xd;
        &quot;Sunday&quot;,&#xd;
        &quot;Monday&quot;,&#xd;
        &quot;Tuesday&quot;,&#xd;
        &quot;Wednesday&quot;&#xd;
    ],&#xd;
    &quot;StartTime&quot;: &quot;12:35:20.0000235&quot;,&#xd;
    &quot;EndTime&quot;: &quot;23:12:20.0000239&quot;,&#xd;
    &quot;ExcludePublicHolidays&quot;: true,&#xd;
    &quot;ExcludeSchoolHolidays&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/ISRSettings?updateMode=0</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RSettings" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RSSetting" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;defaultDeliverySettingsList&quot;: [&#xd;
    {&#xd;
      &quot;daysToCampaignEnd&quot;: 30,&#xd;
      &quot;upperLimitOfOverDelivery&quot;: 90,&#xd;
      &quot;lowerLimitOfOverDelivery&quot;: 70&#xd;
    }&#xd;
  ],&#xd;
  &quot;demographicsSettings&quot;: [&#xd;
    {&#xd;
      &quot;deliverySettingsList&quot;: [&#xd;
        {&#xd;
          &quot;daysToCampaignEnd&quot;: 30,&#xd;
          &quot;upperLimitOfOverDelivery&quot;: 90,&#xd;
          &quot;lowerLimitOfOverDelivery&quot;: 70&#xd;
        }&#xd;
      ],&#xd;
      &quot;demographicId&quot;: &quot;${rnd_d_name}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/RSSettings</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WaitForRavenIndexes" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${SQLServerEnabled}&quot;== &quot;false&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Wait for Indexes" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${env}</stringProp>
                <stringProp name="HTTPSampler.port">${env:port}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get RSSetting" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="salesArea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesArea</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/RSSettings</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update RSSetting" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;defaultDeliverySettingsList&quot;: [&#xd;
    {&#xd;
      &quot;daysToCampaignEnd&quot;: 20,&#xd;
      &quot;upperLimitOfOverDelivery&quot;: 110,&#xd;
      &quot;lowerLimitOfOverDelivery&quot;: 80&#xd;
    }&#xd;
  ],&#xd;
  &quot;demographicsSettings&quot;: [&#xd;
    {&#xd;
      &quot;deliverySettingsList&quot;: [&#xd;
        {&#xd;
          &quot;daysToCampaignEnd&quot;: 20,&#xd;
          &quot;upperLimitOfOverDelivery&quot;: 110,&#xd;
          &quot;lowerLimitOfOverDelivery&quot;: 80&#xd;
        }&#xd;
      ],&#xd;
      &quot;demographicId&quot;: &quot;${rnd_d_name}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/RSSettings?updateMode=0</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FunctionalAreas" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GUID variable storage" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="GUID_FA" elementType="Argument">
                  <stringProp name="Argument.name">GUID_FA</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate GUID" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;GUID_FA&quot;, &quot;${__UUID}&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Fault type random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_ftype_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get FunctionalAreas" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FunctionalAreas</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update FunctionalArea" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;functionalAreaId&quot;: &quot;${GUID_FA}&quot;,&#xd;
    &quot;faultTypeId&quot;: &quot;${rnd_ftype_name}&quot;,&#xd;
    &quot;isSelected&quot;: true&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">FunctionalAreas</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LibrarySalesAreaPassPriority" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="LSAPP Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">lsapp_name-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_lsapp_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="LSAPP Random NEW name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">lsapp_name-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_lsapp_name_new</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create LSAPP" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
           &quot;name&quot;: &quot;${rnd_lsapp_name}&quot;,&#xd;
           &quot;startTime&quot;: &quot;06:00:05&quot;,&#xd;
           &quot;endTime&quot;: &quot;07:00:05&quot;,&#xd;
           &quot;daysOfWeek&quot;: &quot;1111101&quot;,&#xd;
           &quot;salesAreaPriorities&quot;: [&#xd;
             {&#xd;
               &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
               &quot;priority&quot;: &quot;Include&quot;&#xd;
             }&#xd;
           ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Library/SalesAreaPassPriorities</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">34</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get LSAPPs" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Library/SalesAreaPassPriorities</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">lsappId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$[-1:].uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get LSAPP by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Library/SalesAreaPassPriorities/${lsappId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Default LSAPP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Library/SalesAreaPassPriorities/Default</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Default LSAPP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Library/SalesAreaPassPriorities/default?id=${lsappId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update LSAPP" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
           &quot;name&quot;: &quot;${rnd_lsapp_name_new}&quot;,&#xd;
           &quot;startTime&quot;: &quot;08:00:30&quot;,&#xd;
           &quot;endTime&quot;: &quot;09:00:30&quot;,&#xd;
           &quot;daysOfWeek&quot;: &quot;1010101&quot;,&#xd;
           &quot;salesAreaPriorities&quot;: [&#xd;
             {&#xd;
               &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
               &quot;priority&quot;: &quot;Exclude&quot;&#xd;
             }&#xd;
           ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Library/SalesAreaPassPriorities?id=${lsappId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Smooth" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Smooth Configuration Random number generator" enabled="true">
              <stringProp name="maximumValue">4</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">0</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_smoothConf</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Smooth Configuration with service API" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/Tests/SmoothConfiguration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Smoth Conf ID - BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;SmoothConfIdRsponse&quot;, new String(data));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Smooth FailureMessages" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Smooth/FailureMessages</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Smooth BestBreakFactors" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Smooth/BestBreakFactors</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Smooth Configuration" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Smooth/Configuration/${SmoothConfIdRsponse}/Validate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Export Smooth Configuration" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Smooth/Configuration/${SmoothConfIdRsponse}/Passes/Export</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Export Smooth BestBreakFactors" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Smooth/Configuration/${SmoothConfIdRsponse}/BestBreakFactorGroups/Export</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Generate Run Results Data" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Run Data" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/Tests/RunResult</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Scenario ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ScenarioId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.scenarioId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Scenario ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">runId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.runId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Random name variable storage (Pass)" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="random_pass_name" elementType="Argument">
                  <stringProp name="Argument.name">random_pass_name</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate Random name for Passes" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;random_pass_name&quot;, &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}&quot;); </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Pass Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">0</stringProp>
              <stringProp name="outputFormat">pass-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_pass_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Pass" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;General&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Minimum Efficiency&quot;,&#xd;
            &quot;Value&quot;: &quot;10&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Maximum Rank&quot;,&#xd;
            &quot;Value&quot;: &quot;99999&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Demograph Banding Tolerance&quot;,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Default Centre Break Ratio&quot;,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Use Max Spot Ratings Set By Campaigns&quot;,&#xd;
            &quot;Value&quot;: &quot;1&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;Weightings&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Value&quot;: &quot;15&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign Sales Area&quot;,&#xd;
            &quot;Value&quot;: &quot;85&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Spot Length&quot;,&#xd;
            &quot;Value&quot;: &quot;75&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Daypart&quot;,&#xd;
            &quot;Value&quot;: &quot;65&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight&quot;,&#xd;
            &quot;Value&quot;: &quot;55&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 6,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Fit to Requirement&quot;,&#xd;
            &quot;Value&quot;: &quot;87&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 7,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Fit to Spot Length&quot;,&#xd;
            &quot;Value&quot;: &quot;22&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 8,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Centre/End&quot;,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 9,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Booking Position&quot;,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;Tolerances&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 10,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 8,&#xd;
            &quot;InternalType&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Description&quot;: &quot;Booking Position&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 9,&#xd;
            &quot;InternalType&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Description&quot;: &quot;Centre/End&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 20,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Spot Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Daypart&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 20,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 1,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 6,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Wgt/Daypart&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 1,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 7,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Peak Daypart&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 12,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Daypart/Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 20,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 13,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight/Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 14,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight/Daypart/Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 10,&#xd;
            &quot;InternalType&quot;: &quot;Budget&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign (Budget)&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 11,&#xd;
            &quot;InternalType&quot;: &quot;Budget&quot;,&#xd;
            &quot;Description&quot;: &quot;Sales Area (Budget)&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;Rules&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Day&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;10&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;5&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Hour&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;2&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;2&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per 2 Hours&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;6&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;6&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Breaks Between Spots&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Hours Between Spots&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 6,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Programme/Day&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;5&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;5&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 7,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Programme/Week&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;15&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;15&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 17,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots per Prog/100 rtgs&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 18,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Zero Ratings&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;1&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;1&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 20,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Weeks Between Programmes&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 21,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Ratings for Spot Campaigns&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 22,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Sub Area Slotting %&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 23,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Minimum Break Availability&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;5&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;5&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 24,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Prog/Time&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;4&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;4&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 25,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Days Between Prog/Time&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 26,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Weeks Between Prog/Time&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 27,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Ratings for Rating Campaigns&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;9999999&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;99999999&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ProgrammeRepetitions&quot;: [],&#xd;
    &quot;BreakExclusions&quot;: [&#xd;
        {&#xd;
            &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
            &quot;StartDate&quot;: &quot;2018-06-24T00:00:00.0000000Z&quot;,&#xd;
            &quot;EndDate&quot;: &quot;2019-12-28T00:00:00.0000000Z&quot;,&#xd;
            &quot;StartTime&quot;: &quot;22:30:00&quot;,&#xd;
            &quot;EndTime&quot;: &quot;00:00:00&quot;,&#xd;
            &quot;SelectableDays&quot;: [&#xd;
                &quot;Monday&quot;,&#xd;
                &quot;Tuesday&quot;,&#xd;
                &quot;Wednesday&quot;,&#xd;
                &quot;Thursday&quot;,&#xd;
                &quot;Friday&quot;,&#xd;
                &quot;Saturday&quot;,&#xd;
                &quot;Sunday&quot;&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;SlottingLimits&quot;: [],&#xd;
    &quot;PassSalesAreaPriorities&quot;: {&#xd;
        &quot;SalesAreaPriorities&quot;: [&#xd;
            {&#xd;
                &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
                &quot;Priority&quot;: &quot;Priority3&quot;&#xd;
            }&#xd;
        ],&#xd;
        &quot;StartDate&quot;: &quot;2019-12-07T00:00:00Z&quot;,&#xd;
        &quot;EndDate&quot;: &quot;2019-12-08T00:00:00Z&quot;,&#xd;
        &quot;StartTime&quot;: &quot;06:00:00&quot;,&#xd;
        &quot;EndTime&quot;: &quot;05:59:59&quot;,&#xd;
        &quot;DaysOfWeek&quot;: &quot;1111111&quot;&#xd;
    },&#xd;
    &quot;Name&quot;: &quot;${random_pass_name}&quot;,&#xd;
    &quot;DateCreated&quot;: &quot;2019-09-10T04:19:21.6968419Z&quot;,&#xd;
    &quot;DateModified&quot;: &quot;2019-11-14T08:40:57.3532051Z&quot;,&#xd;
    &quot;IsLibraried&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Passes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WaitForIndexes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Schedules" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Schedules" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Schedules</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Schedules Break" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="dateFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateFrom</stringProp>
                  </elementProp>
                  <elementProp name="dateTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateTo</stringProp>
                  </elementProp>
                  <elementProp name="salesAreaNames" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesAreaNames</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Schedules/Break</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Schedules Programme" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="dateFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateFrom</stringProp>
                  </elementProp>
                  <elementProp name="dateTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateTo</stringProp>
                  </elementProp>
                  <elementProp name="salesAreaNames" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesAreaNames</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Schedules/Programme</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Schedules" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="dateFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2000-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateFrom</stringProp>
                  </elementProp>
                  <elementProp name="dateTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2030-07-04T12:01:22.132Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dateTo</stringProp>
                  </elementProp>
                  <elementProp name="salesAreaNames" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${rnd_sa_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">salesAreaNames</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Schedules/Programme</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scenario Results" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ScenarioResult" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Recommendations" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Recommendations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/recommendations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Recommendations Extended" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/recommendations/extended</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Recommendations Simple" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/recommendations/simple</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Recommendations Aggregate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/recommendations/aggregate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Recommendations by Scenario IDs" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="scenarioIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ScenarioId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scenarioIds</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/recommendations/simple</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Scenario Failures" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Scenario Failures" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/failures</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Scenario Failure Types" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/failuretypes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Scenario Top Failures" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ScenarioResults/${ScenarioId}/topfailures</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Passes" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Passes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Passes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Can take a long time to be executed that is why considered as disabled</stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Passes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${random_pass_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Passes/search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Pass ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">passId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Pass by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Passes/${passId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Pass" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;General&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Minimum Efficiency&quot;,&#xd;
            &quot;Value&quot;: &quot;9&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Maximum Rank&quot;,&#xd;
            &quot;Value&quot;: &quot;100&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Demograph Banding Tolerance&quot;,&#xd;
            &quot;Value&quot;: &quot;10&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Default Centre Break Ratio&quot;,&#xd;
            &quot;Value&quot;: &quot;20&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Defaults&quot;,&#xd;
            &quot;Description&quot;: &quot;Use Max Spot Ratings Set By Campaigns&quot;,&#xd;
            &quot;Value&quot;: &quot;1&quot;,&#xd;
            &quot;Type&quot;: &quot;general&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;Weightings&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Value&quot;: &quot;15&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign Sales Area&quot;,&#xd;
            &quot;Value&quot;: &quot;85&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Spot Length&quot;,&#xd;
            &quot;Value&quot;: &quot;75&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Daypart&quot;,&#xd;
            &quot;Value&quot;: &quot;65&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight&quot;,&#xd;
            &quot;Value&quot;: &quot;55&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 6,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Fit to Requirement&quot;,&#xd;
            &quot;Value&quot;: &quot;87&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 7,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Fit to Spot Length&quot;,&#xd;
            &quot;Value&quot;: &quot;22&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 8,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Centre/End&quot;,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 9,&#xd;
            &quot;InternalType&quot;: &quot;Weightings&quot;,&#xd;
            &quot;Description&quot;: &quot;Booking Position&quot;,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;weightings&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;Tolerances&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 10,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 8,&#xd;
            &quot;InternalType&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Description&quot;: &quot;Booking Position&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 9,&#xd;
            &quot;InternalType&quot;: &quot;Campaign&quot;,&#xd;
            &quot;Description&quot;: &quot;Centre/End&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 20,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Spot Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Daypart&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 20,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 1,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 6,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Wgt/Daypart&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 1,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 7,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Peak Daypart&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 12,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Daypart/Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 20,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 13,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight/Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 14,&#xd;
            &quot;InternalType&quot;: &quot;Sales Area&quot;,&#xd;
            &quot;Description&quot;: &quot;Strike Weight/Daypart/Length&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 10,&#xd;
            &quot;InternalType&quot;: &quot;Budget&quot;,&#xd;
            &quot;Description&quot;: &quot;Campaign (Budget)&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 11,&#xd;
            &quot;InternalType&quot;: &quot;Budget&quot;,&#xd;
            &quot;Description&quot;: &quot;Sales Area (Budget)&quot;,&#xd;
            &quot;Value&quot;: null,&#xd;
            &quot;Under&quot;: 0,&#xd;
            &quot;Over&quot;: 0,&#xd;
            &quot;Ignore&quot;: true,&#xd;
            &quot;ForceOverUnder&quot;: &quot;None&quot;,&#xd;
            &quot;Type&quot;: &quot;tolerances&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;Rules&quot;: [&#xd;
        {&#xd;
            &quot;RuleId&quot;: 1,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Day&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;10&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;5&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 2,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Hour&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;2&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;2&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 3,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per 2 Hours&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;6&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;6&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 4,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Breaks Between Spots&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 5,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Hours Between Spots&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 6,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Programme/Day&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;5&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;5&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 7,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Programme/Week&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;15&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;15&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 17,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots per Prog/100 rtgs&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 18,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Zero Ratings&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;1&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;1&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 20,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Weeks Between Programmes&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 21,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Ratings for Spot Campaigns&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 22,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Sub Area Slotting %&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 23,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Minimum Break Availability&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;5&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;5&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 24,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Spots Per Prog/Time&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;4&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;4&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 25,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Days Between Prog/Time&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 26,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Min Weeks Between Prog/Time&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;0&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;0&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;RuleId&quot;: 27,&#xd;
            &quot;InternalType&quot;: &quot;Slotting Controls&quot;,&#xd;
            &quot;Description&quot;: &quot;Max Ratings for Rating Campaigns&quot;,&#xd;
            &quot;Ignore&quot;: false,&#xd;
            &quot;Value&quot;: &quot;9999999&quot;,&#xd;
            &quot;PeakValue&quot;: &quot;99999999&quot;,&#xd;
            &quot;Type&quot;: &quot;rules&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ProgrammeRepetitions&quot;: [],&#xd;
    &quot;BreakExclusions&quot;: [&#xd;
        {&#xd;
            &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
            &quot;StartDate&quot;: &quot;2018-06-24T00:00:00.0000000Z&quot;,&#xd;
            &quot;EndDate&quot;: &quot;2019-12-28T00:00:00.0000000Z&quot;,&#xd;
            &quot;StartTime&quot;: &quot;22:30:00&quot;,&#xd;
            &quot;EndTime&quot;: &quot;00:00:00&quot;,&#xd;
            &quot;SelectableDays&quot;: [&#xd;
                &quot;Monday&quot;,&#xd;
                &quot;Tuesday&quot;,&#xd;
                &quot;Wednesday&quot;,&#xd;
                &quot;Thursday&quot;,&#xd;
                &quot;Friday&quot;,&#xd;
                &quot;Saturday&quot;,&#xd;
                &quot;Sunday&quot;&#xd;
            ]&#xd;
        }&#xd;
    ],&#xd;
    &quot;SlottingLimits&quot;: [],&#xd;
    &quot;PassSalesAreaPriorities&quot;: {&#xd;
        &quot;SalesAreaPriorities&quot;: [&#xd;
            {&#xd;
                &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
                &quot;Priority&quot;: &quot;Priority3&quot;&#xd;
            }&#xd;
        ],&#xd;
        &quot;StartDate&quot;: null,&#xd;
        &quot;EndDate&quot;: null,&#xd;
        &quot;StartTime&quot;: &quot;06:00:00&quot;,&#xd;
        &quot;EndTime&quot;: &quot;05:59:59&quot;,&#xd;
        &quot;DaysOfWeek&quot;: &quot;1111111&quot;&#xd;
    },&#xd;
    &quot;Name&quot;: &quot;${rnd_pass_name}_updated&quot;,&#xd;
    &quot;DateCreated&quot;: &quot;2019-09-10T04:19:21.6968419Z&quot;,&#xd;
    &quot;DateModified&quot;: &quot;2019-11-14T08:40:57.3532051Z&quot;,&#xd;
    &quot;IsLibraried&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Passes/${passId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Runs" enabled="true"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Run Random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">run-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_run_id_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GUID variable storage (Run)" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="GUID_RUN" elementType="Argument">
                  <stringProp name="Argument.name">GUID_RUN</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate GUID for Run" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;GUID_RUN&quot;, &quot;${__UUID}&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GUID variable storage (Scenario)" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="GUID_SCENARIO" elementType="Argument">
                  <stringProp name="Argument.name">GUID_SCENARIO</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate GUID for Scenario" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;GUID_SCENARIO&quot;, &quot;${__UUID}&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Run" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SalesAreaPriorities&quot;: [&#xd;
        {&#xd;
            &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
            &quot;Priority&quot;: &quot;Priority3&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;campaigns&quot;: [&#xd;
    {&#xd;
      &quot;externalId&quot;: &quot;${rnd_cmpgn_name}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;campaignsProcessesSettings&quot;: [&#xd;
    {&#xd;
      &quot;externalId&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
      &quot;inefficientSpotRemoval&quot;: true,&#xd;
      &quot;includeRightSizer&quot;: &quot;No&quot;&#xd;
    }&#xd;
   ],&#xd;
    &quot;addDefaultScenario&quot;: false,&#xd;
    &quot;id&quot;: &quot;${GUID_RUN}&quot;,&#xd;
    &quot;Description&quot;: &quot;test description&quot;,&#xd;
    &quot;StartDate&quot;: &quot;2019-12-04T00:00:00.0000000Z&quot;,&#xd;
    &quot;StartTime&quot;: &quot;00:00:00.0000029&quot;,&#xd;
    &quot;EndDate&quot;: &quot;2019-12-12T00:00:00.0000000Z&quot;,&#xd;
    &quot;EndTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
    &quot;Real&quot;: true,&#xd;
    &quot;Smooth&quot;: true,&#xd;
    &quot;SmoothDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2019-12-05T10:56:22.9762952Z&quot;,&#xd;
        &quot;End&quot;: &quot;2019-12-06T10:56:22.9762952Z&quot;&#xd;
    },&#xd;
    &quot;ISR&quot;: false,&#xd;
    &quot;ISRDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2018-12-24T04:48:54.0462132&quot;,&#xd;
        &quot;End&quot;: &quot;2020-03-29T02:23:33.0402811&quot;&#xd;
    },&#xd;
    &quot;Optimisation&quot;: false,&#xd;
    &quot;OptimisationDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2021-07-04T22:25:17.0372808&quot;,&#xd;
        &quot;End&quot;: &quot;2021-05-16T04:39:54.5337458&quot;&#xd;
    },&#xd;
    &quot;RightSizer&quot;: false,&#xd;
    &quot;RightSizerDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2018-05-02T15:14:37.5296038&quot;,&#xd;
        &quot;End&quot;: &quot;2020-11-21T11:23:01.0510962&quot;&#xd;
    },&#xd;
    &quot;SpreadProgramming&quot;: false,&#xd;
    &quot;IsLocked&quot;: false,&#xd;
	&quot;Objectives&quot;: &quot;ObjectivesTest&quot;,&#xd;
	&quot;Author&quot;: {&#xd;
        &quot;Id&quot;: 31,&#xd;
        &quot;Name&quot;: &quot;NameTest&quot;&#xd;
    },&#xd;
    &quot;EfficiencyPeriod&quot;: &quot;RunPeriod&quot;,&#xd;
    &quot;NumberOfWeeks&quot;: 1,&#xd;
	&quot;scenarios&quot;: [&#xd;
    {&#xd;
      &quot;passes&quot;: [&#xd;
        {&#xd;
          &quot;general&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 1,&#xd;
              &quot;internalType&quot;: &quot;1&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;value&quot;: &quot;1&quot;,&#xd;
              &quot;type&quot;: &quot;general&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;weightings&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 1,&#xd;
              &quot;internalType&quot;: &quot;string&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;value&quot;: &quot;string&quot;,&#xd;
              &quot;type&quot;: &quot;weightings&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;tolerances&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 2,&#xd;
              &quot;internalType&quot;: &quot;Campaign&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;value&quot;: null,&#xd;
              &quot;under&quot;: 0,&#xd;
              &quot;over&quot;: 0,&#xd;
              &quot;ignore&quot;: true,&#xd;
              &quot;forceUnderOver&quot;: &quot;None&quot;,&#xd;
              &quot;type&quot;: &quot;tolerances&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;rules&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 0,&#xd;
              &quot;internalType&quot;: &quot;Slotting Control&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;ignore&quot;: true,&#xd;
              &quot;value&quot;: &quot;6&quot;,&#xd;
              &quot;peakValue&quot;: &quot;6&quot;,&#xd;
              &quot;type&quot;: &quot;rules&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;programmeRepetitions&quot;: [&#xd;
            {&#xd;
              &quot;minutes&quot;: 0,&#xd;
              &quot;factor&quot;: 0,&#xd;
              &quot;peakFactor&quot;: 0&#xd;
            }&#xd;
          ],&#xd;
          &quot;breakExclusions&quot;: [&#xd;
            {&#xd;
              &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
              &quot;startDate&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
              &quot;endDate&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
              &quot;startTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
              &quot;endTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
              &quot;selectableDays&quot;: [&#xd;
                &quot;Sunday&quot;&#xd;
              ]&#xd;
            }&#xd;
          ],&#xd;
          &quot;slottingLimits&quot;: [&#xd;
            {&#xd;
              &quot;demographs&quot;: &quot;${rnd_d_name}&quot;,&#xd;
              &quot;minimumEfficiency&quot;: 0,&#xd;
              &quot;maximumEfficiency&quot;: 0,&#xd;
              &quot;bandingTolerance&quot;: 0&#xd;
            }&#xd;
          ],&#xd;
          &quot;passSalesAreaPriorities&quot;: {&#xd;
            &quot;salesAreaPriorities&quot;: [&#xd;
              {&#xd;
                &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
                &quot;priority&quot;: &quot;Exclude&quot;&#xd;
              }&#xd;
            ],&#xd;
            &quot;startDate&quot;: &quot;2019-12-07T21:13:56.144Z&quot;,&#xd;
            &quot;endDate&quot;: &quot;2019-12-08T21:13:56.144Z&quot;,&#xd;
            &quot;startTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
            &quot;endTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
            &quot;daysOfWeek&quot;: &quot;1010101&quot;&#xd;
          },&#xd;
          &quot;id&quot;: &quot;${passId}&quot;,&#xd;
          &quot;name&quot;: &quot;${random_pass_name}&quot;,&#xd;
          &quot;isLibraried&quot;: true,&#xd;
          &quot;dateCreated&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
          &quot;dateModified&quot;: &quot;2019-12-11T21:13:56.144Z&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;campaignPassPriorities&quot;: [&#xd;
        {&#xd;
          &quot;campaignExternalId&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
          &quot;passPriorities&quot;: [&#xd;
            {&#xd;
              &quot;passId&quot;: ${passId},&#xd;
              &quot;passName&quot;: &quot;${random_pass_name}&quot;,&#xd;
              &quot;priority&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;id&quot;: &quot;${GUID_SCENARIO}&quot;,&#xd;
      &quot;name&quot;: &quot;string&quot;,&#xd;
      &quot;isDefault&quot;: false,&#xd;
      &quot;isLibraried&quot;: true,&#xd;
      &quot;isAutopilot&quot;: false,&#xd;
      &quot;startedDateTime&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
      &quot;completedDateTime&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
      &quot;progress&quot;: &quot;InProgress&quot;,&#xd;
      &quot;status&quot;: &quot;Pending&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;Manual&quot;: false,&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Runs" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Run by ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/${runId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="GUID variable storage (Updated Scenario)" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="GUID_UPD_SCENARIO" elementType="Argument">
                  <stringProp name="Argument.name">GUID_UPD_SCENARIO</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate GUID for Scenario" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;GUID_UPD_SCENARIO&quot;, &quot;${__UUID}&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Run by ID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;SalesAreaPriorities&quot;: [&#xd;
        {&#xd;
            &quot;SalesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
            &quot;Priority&quot;: &quot;Priority3&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;campaigns&quot;: [&#xd;
    {&#xd;
      &quot;externalId&quot;: &quot;${rnd_cmpgn_name}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;campaignsProcessesSettings&quot;: [&#xd;
    {&#xd;
      &quot;externalId&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
      &quot;inefficientSpotRemoval&quot;: true,&#xd;
      &quot;includeRightSizer&quot;: &quot;No&quot;&#xd;
    }&#xd;
   ],&#xd;
    &quot;id&quot;: &quot;${runId}&quot;,&#xd;
    &quot;Description&quot;: &quot;test description but updated&quot;,&#xd;
    &quot;StartDate&quot;: &quot;2019-12-04T00:00:00.0000000Z&quot;,&#xd;
    &quot;StartTime&quot;: &quot;00:00:00.0000029&quot;,&#xd;
    &quot;EndDate&quot;: &quot;2019-12-12T00:00:00.0000000Z&quot;,&#xd;
    &quot;EndTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
    &quot;Real&quot;: true,&#xd;
    &quot;Smooth&quot;: true,&#xd;
    &quot;SmoothDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2019-12-05T10:56:22.9762952Z&quot;,&#xd;
        &quot;End&quot;: &quot;2019-12-06T10:56:22.9762952Z&quot;&#xd;
    },&#xd;
    &quot;ISR&quot;: false,&#xd;
    &quot;ISRDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2018-12-24T04:48:54.0462132&quot;,&#xd;
        &quot;End&quot;: &quot;2020-03-29T02:23:33.0402811&quot;&#xd;
    },&#xd;
    &quot;Optimisation&quot;: false,&#xd;
    &quot;OptimisationDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2021-07-04T22:25:17.0372808&quot;,&#xd;
        &quot;End&quot;: &quot;2021-05-16T04:39:54.5337458&quot;&#xd;
    },&#xd;
    &quot;RightSizer&quot;: false,&#xd;
    &quot;RightSizerDateRange&quot;: {&#xd;
        &quot;Start&quot;: &quot;2018-05-02T15:14:37.5296038&quot;,&#xd;
        &quot;End&quot;: &quot;2020-11-21T11:23:01.0510962&quot;&#xd;
    },&#xd;
    &quot;SpreadProgramming&quot;: false,&#xd;
    &quot;IsLocked&quot;: false,&#xd;
	&quot;Objectives&quot;: &quot;ObjectivesTest&quot;,&#xd;
	&quot;Author&quot;: {&#xd;
        &quot;Id&quot;: 31,&#xd;
        &quot;Name&quot;: &quot;NameTest&quot;&#xd;
    },&#xd;
    &quot;EfficiencyPeriod&quot;: &quot;RunPeriod&quot;,&#xd;
    &quot;NumberOfWeeks&quot;: 1,&#xd;
	&quot;scenarios&quot;: [&#xd;
    {&#xd;
      &quot;passes&quot;: [&#xd;
        {&#xd;
          &quot;general&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 1,&#xd;
              &quot;internalType&quot;: &quot;1&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;value&quot;: &quot;1&quot;,&#xd;
              &quot;type&quot;: &quot;string&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;weightings&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 1,&#xd;
              &quot;internalType&quot;: &quot;string&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;value&quot;: &quot;string&quot;,&#xd;
              &quot;type&quot;: &quot;string&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;tolerances&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 2,&#xd;
              &quot;internalType&quot;: &quot;string&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;value&quot;: &quot;string&quot;,&#xd;
              &quot;under&quot;: 0,&#xd;
              &quot;over&quot;: 0,&#xd;
              &quot;ignore&quot;: true,&#xd;
              &quot;forceUnderOver&quot;: &quot;None&quot;,&#xd;
              &quot;type&quot;: &quot;string&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;rules&quot;: [&#xd;
            {&#xd;
              &quot;ruleId&quot;: 0,&#xd;
              &quot;internalType&quot;: &quot;string&quot;,&#xd;
              &quot;description&quot;: &quot;string&quot;,&#xd;
              &quot;ignore&quot;: true,&#xd;
              &quot;value&quot;: &quot;string&quot;,&#xd;
              &quot;peakValue&quot;: &quot;string&quot;,&#xd;
              &quot;type&quot;: &quot;string&quot;&#xd;
            }&#xd;
          ],&#xd;
          &quot;programmeRepetitions&quot;: [&#xd;
            {&#xd;
              &quot;minutes&quot;: 0,&#xd;
              &quot;factor&quot;: 0,&#xd;
              &quot;peakFactor&quot;: 0&#xd;
            }&#xd;
          ],&#xd;
          &quot;breakExclusions&quot;: [&#xd;
            {&#xd;
              &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
              &quot;startDate&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
              &quot;endDate&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
              &quot;startTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
              &quot;endTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
              &quot;selectableDays&quot;: [&#xd;
                &quot;Sunday&quot;&#xd;
              ]&#xd;
            }&#xd;
          ],&#xd;
          &quot;slottingLimits&quot;: [&#xd;
            {&#xd;
              &quot;demographs&quot;: &quot;${rnd_d_name}&quot;,&#xd;
              &quot;minimumEfficiency&quot;: 0,&#xd;
              &quot;maximumEfficiency&quot;: 0,&#xd;
              &quot;bandingTolerance&quot;: 0&#xd;
            }&#xd;
          ],&#xd;
          &quot;passSalesAreaPriorities&quot;: {&#xd;
            &quot;salesAreaPriorities&quot;: [&#xd;
              {&#xd;
                &quot;salesArea&quot;: &quot;${rnd_sa_name}&quot;,&#xd;
                &quot;priority&quot;: &quot;Exclude&quot;&#xd;
              }&#xd;
            ],&#xd;
            &quot;startDate&quot;: &quot;2019-12-07T21:13:56.144Z&quot;,&#xd;
            &quot;endDate&quot;: &quot;2019-12-08T21:13:56.144Z&quot;,&#xd;
            &quot;startTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
            &quot;endTime&quot;: &quot;00:00:00.0000025&quot;,&#xd;
            &quot;daysOfWeek&quot;: &quot;1010101&quot;&#xd;
          },&#xd;
          &quot;id&quot;: &quot;${passId}&quot;,&#xd;
          &quot;name&quot;: &quot;${random_pass_name}&quot;,&#xd;
          &quot;isLibraried&quot;: true,&#xd;
          &quot;dateCreated&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
          &quot;dateModified&quot;: &quot;2019-12-11T21:13:56.144Z&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;campaignPassPriorities&quot;: [&#xd;
        {&#xd;
          &quot;campaignExternalId&quot;: &quot;${rnd_cmpgn_name}&quot;,&#xd;
          &quot;passPriorities&quot;: [&#xd;
            {&#xd;
              &quot;passId&quot;: ${passId},&#xd;
              &quot;passName&quot;: &quot;${random_pass_name}&quot;,&#xd;
              &quot;priority&quot;: 3&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;id&quot;: &quot;${GUID_UPD_SCENARIO}&quot;,&#xd;
      &quot;name&quot;: &quot;string&quot;,&#xd;
      &quot;isDefault&quot;: false,&#xd;
      &quot;isLibraried&quot;: true,&#xd;
      &quot;isAutopilot&quot;: false,&#xd;
      &quot;startedDateTime&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
      &quot;completedDateTime&quot;: &quot;2019-12-11T21:13:56.144Z&quot;,&#xd;
      &quot;progress&quot;: &quot;InProgress&quot;,&#xd;
      &quot;status&quot;: &quot;Pending&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;Manual&quot;: false,&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/${runId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Runs Complete" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Complete</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Runs NotStarted" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">NotStarted</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/Search</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Runs Summary" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="statuses" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">Complete%0ANotStarted</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">statuses</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/search/summary</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ISRSettings and RSSettings - Global" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update ISR Settings - Global" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;excludeSpotsBookedByProgrammeRequirements&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/ISRSettings/global</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get ISR Settings - Global" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/ISRSettings/global</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update RS Settings - Global" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;excludeSpotsBookedByProgrammeRequirements&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/RSSettings/global</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get RS Settings - Global" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Runs/RSSettings/global</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sponsorship" enabled="false"/>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Sponsorship random name generator" enabled="true">
              <stringProp name="maximumValue">999999</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat">spnship-000000</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">rnd_sponsorship_name</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Sponsorship" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\Source\IC\xg-gameplan-sanitized-data\nine-data-20180501\spots_20180501143101303</stringProp>
                    <stringProp name="File.paramname"></stringProp>
                    <stringProp name="File.mimetype"></stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;sponsoredItems&quot;: [&#xd;
      {&#xd;
        &quot;sponsorshipItems&quot;: [&#xd;
          {&#xd;
            &quot;salesAreas&quot;: [&#xd;
              &quot;${rnd_sa_name}&quot;&#xd;
            ],&#xd;
            &quot;startDate&quot;: &quot;2030-01-24T10:30:43.223Z&quot;,&#xd;
            &quot;endDate&quot;: &quot;2030-01-24T10:30:45.223Z&quot;,&#xd;
            &quot;dayParts&quot;: [&#xd;
              {&#xd;
                &quot;startTime&quot;: &quot;00:00:00.0000029&quot;,&#xd;
                &quot;endTime&quot;: &quot;00:00:00.0000035&quot;,&#xd;
                &quot;daysOfWeek&quot;: [&#xd;
                  &quot;Tue&quot;&#xd;
                ]&#xd;
              }&#xd;
            ],&#xd;
            &quot;programmeName&quot;: &quot;${rnd_pr_name}&quot;&#xd;
          }&#xd;
        ],&#xd;
        &quot;clashExclusivities&quot;: [&#xd;
          {&#xd;
            &quot;clashExternalRef&quot;: &quot;${rnd_clash_name}&quot;,&#xd;
            &quot;restrictionType&quot;: null,&#xd;
            &quot;restrictionValue&quot;: null&#xd;
          }&#xd;
        ],&#xd;
        &quot;advertiserExclusivities&quot;: [&#xd;
          &#xd;
        ],&#xd;
        &quot;products&quot;: [&#xd;
          &quot;${rnd_prod_name}&quot;&#xd;
        ],&#xd;
        &quot;calculationType&quot;: &quot;None&quot;,&#xd;
        &quot;restrictionType&quot;: null,&#xd;
        &quot;restrictionValue&quot;: null,&#xd;
        &quot;applicability&quot;: &quot;AllCompetitors&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;externalReferenceId&quot;: &quot;${rnd_sponsorship_name}&quot;,&#xd;
    &quot;restrictionLevel&quot;: &quot;Programme&quot;&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Sponsorships</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WaitForIndexes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/Tests/WaitForIndexes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Sponsorships" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Sponsorships</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">channelId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*.uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Sponsorship" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;sponsoredItems&quot;: [&#xd;
      {&#xd;
        &quot;sponsorshipItems&quot;: [&#xd;
          {&#xd;
            &quot;salesAreas&quot;: [&#xd;
              &quot;${rnd_sa_name}&quot;&#xd;
            ],&#xd;
            &quot;startDate&quot;: &quot;2029-01-24T10:30:43.223Z&quot;,&#xd;
            &quot;endDate&quot;: &quot;2030-01-24T10:30:45.223Z&quot;,&#xd;
            &quot;dayParts&quot;: [&#xd;
              {&#xd;
                &quot;startTime&quot;: &quot;00:00:00.0000029&quot;,&#xd;
                &quot;endTime&quot;: &quot;00:00:00.0000035&quot;,&#xd;
                &quot;daysOfWeek&quot;: [&#xd;
                  &quot;Tue&quot;&#xd;
                ]&#xd;
              }&#xd;
            ],&#xd;
            &quot;programmeName&quot;: &quot;${rnd_pr_name}&quot;&#xd;
          }&#xd;
        ],&#xd;
        &quot;clashExclusivities&quot;: [&#xd;
          {&#xd;
            &quot;clashExternalRef&quot;: &quot;${rnd_clash_name}&quot;,&#xd;
            &quot;restrictionType&quot;: null,&#xd;
            &quot;restrictionValue&quot;: null&#xd;
          }&#xd;
        ],&#xd;
        &quot;advertiserExclusivities&quot;: [&#xd;
          &#xd;
        ],&#xd;
        &quot;products&quot;: [&#xd;
          &quot;${rnd_prod_name}&quot;&#xd;
        ],&#xd;
        &quot;calculationType&quot;: &quot;None&quot;,&#xd;
        &quot;restrictionType&quot;: null,&#xd;
        &quot;restrictionValue&quot;: null,&#xd;
        &quot;applicability&quot;: &quot;AllCompetitors&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;externalReferenceId&quot;: &quot;${rnd_sponsorship_name}&quot;,&#xd;
    &quot;restrictionLevel&quot;: &quot;Programme&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">Sponsorships</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Delete data previously created?" enabled="false">
            <stringProp name="IfController.condition">${deleteAllAfterTesting}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="TestPlan.comments">Not working since it is not possible to get GUID from any externally-faced endpoint :)</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get all Sales Areas" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">SalesAreas</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sa_to_remove</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.*.uid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove first Sales Area" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${env}</stringProp>
              <stringProp name="HTTPSampler.port">${env:port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">SalesAreas?id=${sa_to_remove}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Clean-up requests" enabled="true">
        <stringProp name="TestPlan.comments">Cleans all endpoints by calling DeleteAll methods for all used repositories in the main thread group</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Delete all data?" enabled="false">
          <stringProp name="IfController.condition">${deleteAllAfterTesting}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Demographic" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Demographics/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Programmes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Programmes/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Clashes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Clash/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Products" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Product/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Breaks" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Breaks/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Campaigns" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Campaigns/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL RatingsPredictionSchedules" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">RatingsPredictionSchedules/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Spots" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Spots/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ALL Clearance Codes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${env}</stringProp>
            <stringProp name="HTTPSampler.port">${env:port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ClearanceCode/DeleteAll</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is success?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
