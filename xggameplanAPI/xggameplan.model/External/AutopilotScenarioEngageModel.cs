using System;
using System.Collections.Generic;
using System.Linq;
using ImagineCommunications.GamePlan.Domain.Campaigns;

namespace xggameplan.Model
{
    public class AutopilotScenarioEngageModel : AutopilotScenarioModel
    {
        public int? LoosenPassIndex { get; set; }
        public int? TightenPassIndex { get; set; }

        /// <summary>
        /// Gets tighten and loosen pass indexes
        /// </summary>
        /// <returns></returns>
        public (int tightenPassIndex, int loosenPassIndex) GetAutopilotPassIndexes() =>
            (tightenPassIndex: TightenPassIndex ?? 0, loosenPassIndex: LoosenPassIndex ?? Passes.Count - 1);

        /// <summary>
        /// Adds unique identifiers for the autopilot generated passes
        /// </summary>
        /// <returns>Collection of original pass names</returns>
        public IReadOnlyCollection<string> AddUniquePassNames()
        {
            var originalPassNames = new List<string>();
            foreach (var pass in Passes)
            {
                originalPassNames.Add(pass.Name);
                pass.Name += $" #{Guid.NewGuid().ToString()}";
            }

            return originalPassNames;
        }

        /// <summary>
        /// Updates <see cref="CreateRunScenarioModel.CampaignPassPriorities"/> with new passes
        /// </summary>
        /// <param name="originalPassNames">Collection of pass names before autopilot</param>
        /// <remarks>Assumes the pass names sent are unique to cross reference with passes in scenario</remarks>
        public void UpdateCampaignPassPriorities(IReadOnlyCollection<string> originalPassNames)
        {
            originalPassNames = originalPassNames.Select(n => n.Trim().ToUpperInvariant()).ToList();
            var passNamesSet = new HashSet<string>(originalPassNames);
            foreach (var campaignPassPriority in CampaignPassPriorities)
            {
                // sanitize
                campaignPassPriority.PassPriorities = campaignPassPriority.PassPriorities
                    .Where(pp => passNamesSet.Contains(pp.PassName.Trim().ToUpperInvariant())).ToList();

                for (var i = 0; i < Passes.Count; i++)
                {
                    var pass = Passes[i];
                    if (pass.IsAutoGenerated)
                    {
                        campaignPassPriority.PassPriorities.Insert(i, new CreatePassPriorityModel
                        {
                            PassId = 0,
                            PassName = pass.Name,
                            Priority = (int)PassPriorityType.Include
                        });
                    }
                    else
                    {
                        var passPriority = campaignPassPriority.PassPriorities.ElementAtOrDefault(i);
                        if (passPriority == null || passPriority.PassName.Trim().ToUpperInvariant() != originalPassNames.ElementAt(i))
                        {
                            campaignPassPriority.PassPriorities.Insert(i, new CreatePassPriorityModel { Priority = (int)PassPriorityType.Include });
                        }
                        campaignPassPriority.PassPriorities[i].PassId = 0;
                        campaignPassPriority.PassPriorities[i].PassName = pass.Name;
                    }
                }
            }
        }

        public object Clone()
        {
            var scenario = (AutopilotScenarioEngageModel)MemberwiseClone();

            if (Passes != null)
            {
                scenario.Passes = new List<AutopilotPassModel>();
                Passes.ForEach(p => scenario.Passes.Add((AutopilotPassModel)p.Clone()));
            }

            if (CampaignPassPriorities != null)
            {
                scenario.CampaignPassPriorities = new List<CreateCampaignPassPriorityModel>();
                CampaignPassPriorities.ForEach(cp => scenario.CampaignPassPriorities.Add((CreateCampaignPassPriorityModel)cp.Clone()));
            }

            return scenario;
        }
    }
}
